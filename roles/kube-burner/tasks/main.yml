---

- name: Get current state
  k8s_info:
    api_version: ripsaw.cloudbulldozer.io/v1alpha1
    kind: Benchmark
    name: '{{ ansible_operator_meta.name }}'
    namespace: '{{ operator_namespace }}'
  register: resource_state

- operator_sdk.util.k8s_status:
    api_version: ripsaw.cloudbulldozer.io/v1alpha1
    kind: Benchmark
    name: "{{ ansible_operator_meta.name }}"
    namespace: "{{ operator_namespace }}"
    status:
      state: Building
      complete: false
  when: resource_state.resources[0].status.state is not defined

- name: Get current state - If it has changed
  k8s_info:
    api_version: ripsaw.cloudbulldozer.io/v1alpha1
    kind: Benchmark
    name: '{{ ansible_operator_meta.name }}'
    namespace: '{{ operator_namespace }}'
  register: resource_state


- block:

  - name: Create metrics profile for remote configuration job
    k8s:
      definition:
        apiVersion: v1
        kind: ConfigMap
        metadata:
          name: kube-burner-config-{{ trunc_uuid }}
          namespace: "{{ operator_namespace }}"
        data:
          metrics.yaml: "{{ lookup('file', workload_args.metrics_profile|default('metrics.yaml')) }}"
    when: 
      - workload_args.remote_config is defined
      - workload_args.remote_config
      - workload_args.remote_metrics_profile is not defined
      - workload_args.remote_metrics_profile

  - name: Create cluster-density configmaps
    k8s:
      definition:
        apiVersion: v1
        kind: ConfigMap
        metadata:
          name: kube-burner-config-{{ trunc_uuid }}
          namespace: "{{ operator_namespace }}"
        data:
          config.yml: "{{ lookup('template', 'cluster-density.yml.j2')}}"
          metrics.yaml: "{{ lookup('file', workload_args.metrics_profile|default('metrics-aggregated.yaml')) }}"
          build.yml: "{{ lookup('file', 'build.yml')}}"
          buildconfig.yml: "{{ lookup('file', 'buildconfig.yml')}}"
          deployment.yml: "{{ lookup('file', 'deployment.yml')}}"
          imagestream.yml: "{{ lookup('file', 'imagestream.yml')}}"
          route.yml: "{{ lookup('file', 'route.yml')}}"
          secret.yml: "{{ lookup('file', 'secret.yml')}}"
          service.yml: "{{ lookup('file', 'service.yml')}}"
          configmap.yml: "{{ lookup('file', 'configmap.yml')}}"
    when: workload_args.workload == "cluster-density"

  - name: Create node-density or pod-density configmaps
    k8s:
      definition:
        apiVersion: v1
        kind: ConfigMap
        metadata:
          name: kube-burner-config-{{ trunc_uuid }}
          namespace: "{{ operator_namespace }}"
        data:
          config.yml: "{{ lookup('template', 'node-pod-density.yml.j2')}}"
          metrics.yaml: "{{ lookup('file', workload_args.metrics_profile|default('metrics.yaml')) }}"
          pod.yml: "{{ lookup('file', 'pod.yml')}}"
    when: workload_args.workload == "node-density" or workload_args.workload == "pod-density"

  - name: Create node-density-heavy configmaps
    k8s:
      definition:
        apiVersion: v1
        kind: ConfigMap
        metadata:
          name: kube-burner-config-{{ trunc_uuid }}
          namespace: "{{ operator_namespace }}"
        data:
          config.yml: "{{ lookup('template', 'node-density-heavy.yml.j2')}}"
          metrics.yaml: "{{ lookup('file', workload_args.metrics_profile|default('metrics.yaml')) }}"
          app-deployment.yml: "{{ lookup('file', 'app-deployment.yml')}}"
          postgres-deployment.yml: "{{ lookup('file', 'postgres-deployment.yml')}}"
          postgres-service.yml: "{{ lookup('file', 'postgres-service.yml')}}"
    when: workload_args.workload == "node-density-heavy"

  - name: Create max-namespaces configmaps
    k8s:
      definition:
        apiVersion: v1
        kind: ConfigMap
        metadata:
          name: kube-burner-config-{{ trunc_uuid }}
          namespace: "{{ operator_namespace }}"
        data:
          config.yml: "{{ lookup('template', 'max-namespaces.yml.j2')}}"
          metrics.yaml: "{{ lookup('file', workload_args.metrics_profile|default('metrics-aggregated.yaml')) }}"
          app-deployment.yml: "{{ lookup('file', 'app-deployment.yml')}}"
          postgres-deployment.yml: "{{ lookup('file', 'postgres-deployment.yml')}}"
          postgres-service.yml: "{{ lookup('file', 'postgres-service.yml')}}"
          secret.yml: "{{ lookup('file', 'secret.yml')}}"
    when: workload_args.workload == "max-namespaces"

  - name: Create max-services configmaps
    k8s:
      definition:
        apiVersion: v1
        kind: ConfigMap
        metadata:
          name: kube-burner-config-{{ trunc_uuid }}
          namespace: "{{ operator_namespace }}"
        data:
          config.yml: "{{ lookup('template', 'max-services.yml.j2')}}"
          metrics.yaml: "{{ lookup('file', workload_args.metrics_profile|default('metrics-aggregated.yaml')) }}"
          simple-deployment.yml: "{{ lookup('file', 'simple-deployment.yml')}}"
          service.yml: "{{ lookup('file', 'service.yml')}}"

    when: workload_args.workload == "max-services"

  - name: Create concurrent builds
    k8s:
      definition:
        apiVersion: v1
        kind: ConfigMap
        metadata:
          name: kube-burner-config-{{ trunc_uuid }}
          namespace: "{{ operator_namespace }}"
        data:
          config.yml: "{{ lookup('template', 'concurrent-builds.yml.j2')}}"
          metrics.yaml: "{{ lookup('file', workload_args.metrics_profile|default('metrics-aggregated.yaml')) }}"
          buildconfig_triggers.yml: "{{ lookup('file', 'buildconfig_triggers.yml')}}"
          configmap.yml: "{{ lookup('file', 'configmap.yml')}}"
          imagestream.yml: "{{ lookup('file', 'imagestream.yml')}}"
    when: workload_args.workload == "concurrent-builds"

  - name: Launching kube-burner job
    k8s:
      definition: "{{ lookup('template', 'kube-burner.yml.j2') | from_yaml }}"

  - name: Update resource state
    operator_sdk.util.k8s_status:
      api_version: ripsaw.cloudbulldozer.io/v1alpha1
      kind: Benchmark
      name: "{{ ansible_operator_meta.name }}"
      namespace: "{{ operator_namespace }}"
      status:
        state: Running

  when: resource_state.resources[0].status.state == "Building"

- block:

  - name: Get job status
    k8s_info:
      kind: Job
      api_version: v1
      namespace: '{{ operator_namespace }}'
      name: kube-burner-{{ trunc_uuid }}
    register: job_state

  - name: Set complete state to benchmark
    operator_sdk.util.k8s_status:
      api_version: ripsaw.cloudbulldozer.io/v1alpha1
      kind: Benchmark
      name: "{{ ansible_operator_meta.name }}"
      namespace: "{{ operator_namespace }}"
      status:
        state: Complete
        complete: true
    when: job_state.resources[0].status.succeeded is defined and (job_state.resources[0].status.succeeded | int) > 0

  - name: Set failed state to benchmark
    operator_sdk.util.k8s_status:
      api_version: ripsaw.cloudbulldozer.io/v1alpha1
      kind: Benchmark
      name: "{{ ansible_operator_meta.name }}"
      namespace: "{{ operator_namespace }}"
      status:
        state: Failed
        complete: true
    when: job_state.resources[0].status.failed is defined and (job_state.resources[0].status.failed | int) > 0
  when: resource_state.resources[0].status.state == "Running"
