---
# tasks file for nighthawk

- block:

  - include_tasks: http-tasks.yml
    when: "'http' in {{ workload_args.terminations | default([]) }} or 'mix' in {{ workload_args.terminations | default([]) }}"

  - include_tasks: edge-tasks.yml
    when: "'edge' in {{ workload_args.terminations | default([]) }} or 'mix' in {{ workload_args.terminations | default([]) }}"

  - include_tasks: passthrough-tasks.yml
    when: "'passthrough' in {{ workload_args.terminations | default([]) }} or 'mix' in {{ workload_args.terminations | default([]) }}"

  - include_tasks: reencrypt-tasks.yml
    when: "'reencrypt' in {{ workload_args.terminations | default([]) }} or 'mix' in {{ workload_args.terminations | default([]) }}"
  
  - include_role:
      name: benchmark_state
      tasks_from: set_state
    vars:
      state: Starting Servers

  when: benchmark_state.resources[0].status.state == "Building" and resource_kind == "pod"

- block:

  - name: Get server pods
    k8s_facts:
      kind: Pod
      api_version: v1
      namespace: '{{ operator_namespace }}'
      label_selectors:
        - type = {{ ansible_operator_meta.name }}-bench-nighthawk-server-{{ trunc_uuid }}
    register: server_pods

  - include_role:
      name: benchmark_state
      tasks_from: set_state
    vars:
      state: "Starting Clients"
    when: "workload_args.terminations|default([])|length * workload_args.number_of_routes|default(1)|int == server_pods | json_query('resources[].status[]')|selectattr('phase','match','Running')|list|length"

  when: benchmark_state.resources[0].status.state == "Starting Servers" and resource_kind == "pod"

- block:

  - name: Get server pod info
    k8s_facts:
      kind: Pod
      api_version: v1
      namespace: '{{ operator_namespace }}'
      label_selectors:
        - type = {{ ansible_operator_meta.name }}-bench-nighthawk-server-{{ trunc_uuid }}
    register: server_pods
  
  - name: Get route info
    k8s_facts:
      kind: Route
      api_version: route.openshift.io/v1
      namespace: '{{ operator_namespace }}'
      label_selectors:
        - type = {{ ansible_operator_meta.name }}-bench-nighthawk-route-{{ trunc_uuid }}
    register: routes

  - block:
    - name: Start Client(s)
      k8s:
        definition: "{{ lookup('template', 'workload.yml.j2') | from_yaml }}"
      with_items: "{{ server_pods.resources }}"
      vars:
        routerCanonicalName: "{{ routes.resources[0] | json_query('status.ingress[0].routerCanonicalHostname') }}"
      when: ( server_pods.resources|length > 0 )

    when: resource_kind == "pod"

  - include_role:
      name: benchmark_state
      tasks_from: set_state
    vars:
      state: "Waiting for Clients"

  when: benchmark_state.resources[0].status.state == "Starting Clients"

- block:

  - block:
    - name: Get client pod status
      k8s_facts:
        kind: Pod
        api_version: v1
        namespace: '{{ operator_namespace }}'
        label_selectors:
          - app = nighthawk-bench-client-{{ trunc_uuid }}
      register: client_pods

    - name: Update resource state
      operator_sdk.util.k8s_status:
        api_version: ripsaw.cloudbulldozer.io/v1alpha1
        kind: Benchmark
        name: "{{ ansible_operator_meta.name }}"
        namespace: "{{ operator_namespace }}"
        status:
          state: Clients Running
    - include_role:
        name: benchmark_state
        tasks_from: set_state
      vars:
        state: Clients Running
      when: "workload_args.terminations|default([])|length * workload_args.number_of_routes|default(1)|int == client_pods | json_query('resources[].status[]')|selectattr('phase','match','Running')|list|length and workload_args.pair|default('1')|int  == (client_pods | json_query('resources[].status.podIP')|length)"

    when: resource_kind == "pod"

  when: benchmark_state.resources[0].status.state == "Waiting for Clients"

- block:

  - name: Signal workload
    command: "redis-cli set start-{{ trunc_uuid }} true"

  - include_role:
      name: benchmark_state
      tasks_from: set_state
    vars:
      state: Running

  when: benchmark_state.resources[0].status.state == "Clients Running"

- block:
  - block:
    - name: Waiting for pods to complete....
      k8s_facts:
        kind: pod
        api_version: v1
        namespace: '{{ operator_namespace }}'
        label_selectors:
          - app = nighthawk-bench-client-{{ trunc_uuid }}
      register: client_pods

    - name: Check for client pod failures
      include_role:
        name: benchmark_state
        tasks_from: failure
      when: "(client_pods|json_query('resources[].status[]')|selectattr('phase','match','Failed')|list|length) > 0"

    - include_role:
        name: benchmark_state
        tasks_from: set_state
      vars:
        state: Cleanup
      when: "workload_args.terminations|default([])|length * workload_args.number_of_routes|default(1)|int == (client_pods|json_query('resources[].status[]')|selectattr('phase','match','Succeeded')|list|length)"
    when: resource_kind == "pod"

  when: benchmark_state.resources[0].status.state == "Running"

- block:

  - block:
    - name: Get Server Jobs
      k8s_facts:
        kind: Job
        api_version: v1
        namespace: '{{ operator_namespace }}'
        label_selectors:
          - type = {{ ansible_operator_meta.name }}-bench-nighthawk-job-{{ trunc_uuid }}
      register: server_jobs

    - name: Get Server Pods
      k8s_facts:
        kind: Pod
        api_version: v1
        namespace: '{{ operator_namespace }}'
        label_selectors:
          - type = {{ ansible_operator_meta.name }}-bench-nighthawk-server-{{ trunc_uuid }}
      register: server_pods

    - name: Server Job and Pod names - to clean
      set_fact:
        clean_jobs: |
            [
            {% for item in server_jobs.resources %}
              "{{ item['metadata']['name'] }}",
            {% endfor %}
            ]
        clean_pods: |
            [
            {% for item in server_pods.resources %}
              "{{ item['metadata']['name'] }}",
            {% endfor %}
            ]

    - name: Cleanup server Job
      k8s:
        kind: Job
        api_version: v1
        namespace: '{{ operator_namespace }}'
        state: absent
        name: "{{ item }}"
      with_items: "{{ clean_jobs }}"

    - name: Cleanup server Pod
      k8s:
        kind: Pod
        api_version: v1
        namespace: '{{ operator_namespace }}'
        state: absent
        name: "{{ item }}"
      with_items: "{{ clean_pods }}"

    when: resource_kind == "pod" and cleanup == True

  - block:
    - name: Cleanup redis
      command: "{{ item }}"
      with_items:
        - redis-cli del start-{{ trunc_uuid }}
    when: resource_kind == "pod"

  - operator_sdk.util.k8s_status:
      api_version: ripsaw.cloudbulldozer.io/v1alpha1
      kind: Benchmark
      name: "{{ ansible_operator_meta.name }}"
      namespace: "{{ operator_namespace }}"
      status:
        state: Complete
        complete: true

  when: benchmark_state.resources[0].status.state == "Cleanup"
