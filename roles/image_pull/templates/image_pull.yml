---
apiVersion: batch/v1
kind: Job
metadata:
  name: 'image-pull-{{ trunc_uuid }}'
  namespace: '{{ operator_namespace }}'
spec:
  parallelism: {{ workload_args.pod_count | default(1) | int }}
  template:
    metadata:
      labels:
        app: image-pull-{{ trunc_uuid }}
    spec:
{% if workload_args.runtime_class is defined %}
      runtimeClassName: "{{ workload_args.runtime_class }}"
{% endif %}
{% if workload_args.tolerations is defined %}
      tolerations:
      - key: {{ workload_args.tolerations.key }}
        value: {{ workload_args.tolerations.value }}
        effect: {{ workload_args.tolerations.effect }}
{% endif %}
{% if workload_args.label is defined %}
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: {{ workload_args.label.key }}
                operator: In
                values:
                - {{ workload_args.label.value }}
{% endif %}
      containers:
      - image: {{ workload_args.image | default('quay.io/cloud-bulldozer/image_pull:latest') }}
        name: pull-image
        env:
          - name: my_node_name
            valueFrom:
              fieldRef:
                fieldPath: spec.nodeName
          - name: my_pod_name
            valueFrom:
              fieldRef:
                fieldPath: metadata.name
          - name: uuid
            value: "{{ uuid }}"
          - name: test_user
            value: "{{ test_user | default("ripsaw") }}"
          - name: clustername
            value: "{{ clustername }}"
{% if elasticsearch is defined %}
          - name: es
            value: "{{ elasticsearch.url }}"
          - name: es_index
            value: "{{ elasticsearch.index_name | default("image-pull") }}"
          - name: es_verify_cert
            value: "{{ elasticsearch.verify_cert | default(true) }}"
          - name: parallel
            value: "{{ elasticsearch.parallel | default(false) }}"
{% endif %}
{% if prometheus is defined %}
          - name: prom_es
            value: "{{ prometheus.es_url }}"
          - name: prom_parallel
            value: "{{ prometheus.es_parallel | default(false) }}"
          - name: prom_token
            value: "{{ prometheus.prom_token | default() }}"
          - name: prom_url
            value: "{{ prometheus.prom_url | default() }}"
{% endif %}
        command: ["/bin/sh", "-c"]
        args:
          - > 
{% for my_image in workload_args.image_list %}
            echo "Testing image: {{ my_image }}";
            echo "Waiting for all pods to be Ready";
            redis-cli -h {{ bo.resources[0].status.podIP }} INCR "image-pull-{{ trunc_uuid }}" > /dev/null 2>&1;
            pods=`redis-cli -h {{ bo.resources[0].status.podIP }} GET "image-pull-{{ trunc_uuid }}"`;
            while [[ $pods != {{ workload_args.pod_count | default(1) | string }} ]]; do
              pods=`redis-cli -h {{ bo.resources[0].status.podIP }} GET "image-pull-{{ trunc_uuid }}"`;
              sleep .5;
            done;
            sleep 2;
            redis-cli -h {{ bo.resources[0].status.podIP }} DECR "image-pull-{{ trunc_uuid }}" > /dev/null 2>&1;
            date;
            run_snafu
            --tool image_pull
{% if workload_args.debug is defined and workload_args.debug %}
            -v
{% endif %}
            -u "{{ uuid }}"
            --pod-name ${my_pod_name}
            --timeout "{{ workload_args.timeout | default(600) }}"
            --pod-count {{ workload_args.pod_count | default(1) | int }}
            --retries {{ workload_args.retries | default(0) | int }}
            --image "{{ my_image }}";
{% endfor %}
      imagePullPolicy: Always
      restartPolicy: Never
{% include "metadata.yml.j2" %}
