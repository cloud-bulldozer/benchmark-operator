---
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: "backpack-{{ trunc_uuid }}"
  namespace: "{{ operator_namespace }}"
spec:
  selector:
    matchExpressions:
      - key: app
        operator: In
        values:
        - backpack-{{ trunc_uuid }}
  template:
    metadata:
      labels:
        name: backpack-{{ trunc_uuid }}
        app: backpack-{{ trunc_uuid }}
    spec:
      tolerations:
      - key: node-role.kubernetes.io/master
        effect: NoSchedule
{% if metadata.label is defined %}
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
{% for meta_name, meta_value in metadata.label %}
            - matchExpressions:
              - key: {{ meta_name }}
                operator: In
                values:
                - {{ meta_value }}
{% endfor %}
{% endif %}
      containers:
      - name: backpack
        image: {{ metadata_image | default('quay.io/cloud-bulldozer/backpack:latest') }}
        command: ["/bin/sh", "-c"]
{% if metadata is defined and metadata.force|default(false) is sameas true %}
        args: ["python3 stockpile-wrapper.py -s {{ elasticsearch.server }} -p {{ elasticsearch.port }} -u {{ uuid }} -n $my_node_name -N $my_pod_name --redisip {{ bo.resources[0].status.podIP }} --redisport 6379 --force; sleep infinity"]
{% else %}
        args: ["python3 stockpile-wrapper.py -s {{ elasticsearch.server }} -p {{ elasticsearch.port }} -u {{ uuid }} -n $my_node_name -N $my_pod_name --redisip {{ bo.resources[0].status.podIP }} --redisport 6379; sleep infinity"]
{% endif %}
        imagePullPolicy: Always
        wait: true
{% if metadata is defined and metadata.privileged is defined %}
        securityContext:
          privileged: {{ metadata.privileged | default(false) | bool }}
{% endif %}
        readinessProbe:
          exec:
            command:
              - ls
              - /tmp/stockpile.json
            initialDelaySeconds: 5
            periodSeconds: 5
            failureThreshold: 120
        env:
          - name: my_node_name
            valueFrom:
              fieldRef:
                fieldPath: spec.nodeName
          - name: my_pod_name
            valueFrom:
              fieldRef:
                fieldPath: metadata.name
{% if metadata is defined and metadata.serviceaccount is defined %}
      serviceAccountName: {{ metadata.serviceaccount | default('default') }}
{% endif %}
      terminationGracePeriodSeconds: 30
