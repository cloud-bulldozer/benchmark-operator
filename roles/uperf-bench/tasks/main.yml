---

- name: Get current state
  k8s_facts:
    api_version: ripsaw.cloudbulldozer.io/v1alpha1
    kind: Benchmark
    name: '{{ meta.name }}'
    namespace: '{{ operator_namespace }}'
  register: resource_state

- k8s_status:
    api_version: ripsaw.cloudbulldozer.io/v1alpha1
    kind: Benchmark
    name: "{{ meta.name }}"
    namespace: "{{ operator_namespace }}"
    status:
      state: Starting
      complete: false
  when: resource_state.resources[0].status.state is not defined

- name: Get current state
  k8s_facts:
    api_version: ripsaw.cloudbulldozer.io/v1alpha1
    kind: Benchmark
    name: '{{ meta.name }}'
    namespace: '{{ operator_namespace }}'
  register: resource_state

- block:

  - name: Create service for server pods
    k8s:
      definition: "{{ lookup('template', 'service.yml.j2') | from_yaml }}"
    with_sequence: start=0 count={{ uperf.pair }}
    when: uperf.serviceip

  - name: Start Server(s)
    k8s:
      definition: "{{ lookup('template', 'server.yml.j2') | from_yaml }}"
    register: servers
    with_sequence: start=0 count={{ uperf.pair }}

  - name: Wait for pods to be running....
    k8s_facts:
      kind: Pod
      api_version: v1
      namespace: '{{ operator_namespace }}'
      label_selectors:
        - type = uperf-bench-server-{{ trunc_uuid }}
    register: server_pods
    until: "'Running' in (server_pods | json_query('resources[].status.phase'))"
    retries: 100
    delay: 10

  - name: Capture ServiceIP
    k8s_facts:
      kind: Service
      api_version: v1
      namespace: '{{ operator_namespace }}'
      label_selectors:
        - type = uperf-bench-server-{{ trunc_uuid }}
    register: serviceip
    when: uperf.serviceip

  - name: Capture operator information
    k8s_facts:
      kind: Pod
      api_version: v1
      namespace: '{{ operator_namespace }}'
      label_selectors:
        - name = benchmark-operator
    register: bo

  - name: Generate uperf test
    k8s:
      definition: "{{ lookup('template', 'configmap.yml.j2') | from_yaml }}"

  - name: Start Client(s)
    k8s:
      definition: "{{ lookup('template', 'workload.yml.j2') | from_yaml }}"
    with_items: "{{ server_pods.resources }}"
    when: not uperf.serviceip and server_pods.resources|length > 0

  - name: Start Client(s) - ServiceIP
    k8s:
      definition: "{{ lookup('template', 'workload.yml.j2') | from_yaml }}"
    with_items: "{{ serviceip.resources }}"
    when: uperf.serviceip and serviceip.resources|length > 0

  - name: Check if all clients are up
    k8s_facts:
      kind: Pod
      api_version: v1
      namespace: '{{ operator_namespace }}'
      label_selectors:
        - app = uperf-bench-client-{{ trunc_uuid }}
    register: client_pods
    until: "uperf.pair  == (client_pods | json_query('resources[].status.podIP')|length)"
    retries: 300
    delay: 10

  - name: Signal workload
    command: "redis-cli set start true"

  - k8s_status:
      api_version: ripsaw.cloudbulldozer.io/v1alpha1
      kind: Benchmark
      name: "{{ meta.name }}"
      namespace: "{{ operator_namespace }}"
      status:
        state: Running
        complete: false

  - name: Waiting for pods to complete....
    k8s_facts:
      kind: pod
      api_version: v1
      namespace: '{{ operator_namespace }}'
      label_selectors:
        - app = uperf-bench-client
    register: client_pods
    until: "'Succeeded' in (client_pods | json_query('resources[].status.phase'))"
    retries: 300
    delay: 10

  - name: Pod names - to clean
    set_fact:
      clean_pods: |
          [
          {% for item in server_pods.resources %}
            "{{ item['metadata']['name'] }}",
          {% endfor %}
          ]

  - name: Cleanup run
    k8s:
      kind: pod
      api_version: v1
      namespace: '{{ operator_namespace }}'
      state: absent
      name: "{{ item }}"
    with_items: "{{ clean_pods }}"
    when: cleanup

  - k8s_status:
      api_version: ripsaw.cloudbulldozer.io/v1alpha1
      kind: Benchmark
      name: "{{ meta.name }}"
      namespace: "{{ operator_namespace }}"
      status:
        state: Complete
        complete: true

  when: ( uperf.pair > 0 ) and (resource_state.resources[0].status.complete|bool == false )
