---

- name: Get current state
  k8s_facts:
    api_version: ripsaw.cloudbulldozer.io/v1alpha1
    kind: Benchmark
    name: '{{ meta.name }}'
    namespace: '{{ operator_namespace }}'
  register: resource_state

- k8s_status:
    api_version: ripsaw.cloudbulldozer.io/v1alpha1
    kind: Benchmark
    name: "{{ meta.name }}"
    namespace: "{{ operator_namespace }}"
    status:
      state: Building
      complete: false
  when: resource_state.resources[0].status.state is not defined

- name: Get current state - If it has changed
  k8s_facts:
    api_version: ripsaw.cloudbulldozer.io/v1alpha1
    kind: Benchmark
    name: '{{ meta.name }}'
    namespace: '{{ operator_namespace }}'
  register: resource_state

- name: Capture operator information
  k8s_facts:
    kind: Pod
    api_version: v1
    namespace: '{{ operator_namespace }}'
    label_selectors:
      - name = benchmark-operator
  register: bo

- name: Capture ServiceIP
  k8s_facts:
    kind: Service
    api_version: v1
    namespace: '{{ operator_namespace }}'
    label_selectors:
      - type = uperf-bench-server-{{ trunc_uuid }}
  register: serviceip
  when: uperf.serviceip

- block:

  - name: Create service for server pods
    k8s:
      definition: "{{ lookup('template', 'service.yml.j2') | from_yaml }}"
    with_sequence: start=0 count={{ uperf.pair }}
    when: uperf.serviceip

  - name: Start Server(s)
    k8s:
      definition: "{{ lookup('template', 'server.yml.j2') | from_yaml }}"
    register: servers
    with_sequence: start=0 count={{ uperf.pair }}

  - name: Wait for pods to be running....
    k8s_facts:
      kind: Pod
      api_version: v1
      namespace: '{{ operator_namespace }}'
      label_selectors:
        - type = uperf-bench-server-{{ trunc_uuid }}
    register: server_pods

  - name: Update resource state
    k8s_status:
      api_version: ripsaw.cloudbulldozer.io/v1alpha1
      kind: Benchmark
      name: "{{ meta.name }}"
      namespace: "{{ operator_namespace }}"
      status:
        state: "Starting Servers"

  when: resource_state.resources[0].status.state == "Building" and resource_kind == "pod"

- block:

  - name: Start Server(s)
    k8s:
      definition: "{{ lookup('template', 'server_vm.yml.j2') | from_yaml }}"
    register: servers
    with_sequence: start=0 count={{ uperf.pair }}

  - name: Wait for vms to be running....
    k8s_facts:
      kind: VirtualMachineInstance
      api_version: kubevirt.io/v1alpha3
      namespace: '{{ operator_namespace }}'
      label_selectors:
        - type = uperf-bench-server-{{ trunc_uuid }}
    register: server_vms

  - name: Update resource state
    k8s_status:
      api_version: ripsaw.cloudbulldozer.io/v1alpha1
      kind: Benchmark
      name: "{{ meta.name }}"
      namespace: "{{ operator_namespace }}"
      status:
        state: "Starting Servers"

  when: resource_state.resources[0].status.state == "Building" and resource_kind == "vm"

- block:

  - name: Get server pods
    k8s_facts:
      kind: Pod
      api_version: v1
      namespace: '{{ operator_namespace }}'
      label_selectors:
        - type = uperf-bench-server-{{ trunc_uuid }}
    register: server_pods

  - name: Update resource state
    k8s_status:
      api_version: ripsaw.cloudbulldozer.io/v1alpha1
      kind: Benchmark
      name: "{{ meta.name }}"
      namespace: "{{ operator_namespace }}"
      status:
        state: "Starting Clients"
    when: "uperf.pair == server_pods | json_query('resources[].status[]')|selectattr('phase','match','Running')|list|length"


  when: resource_state.resources[0].status.state == "Starting Servers" and resource_kind == "pod"

- block:

  - name: Wait for vms to be running....
    k8s_facts:
      kind: VirtualMachineInstance
      api_version: kubevirt.io/v1alpha3
      namespace: '{{ operator_namespace }}'
      label_selectors:
        - type = uperf-bench-server-{{ trunc_uuid }}
    register: server_vms

  - name: Update resource state
    k8s_status:
      api_version: ripsaw.cloudbulldozer.io/v1alpha1
      kind: Benchmark
      name: "{{ meta.name }}"
      namespace: "{{ operator_namespace }}"
      status:
        state: "Starting Clients"
    when: "uperf.pair == server_vms | json_query('resources[].status[]')|selectattr('phase','match','Running')|list|length and uperf.pair  == (server_vms | json_query('resources[].status.interfaces[0].ipAddress')|length)"

  - name: blocking client from running uperf
    command: "redis-cli set {{ trunc_uuid }} false"
    with_items: "{{ server_vms.resources }}"
    when: "uperf.pair == server_vms | json_query('resources[].status[]')|selectattr('phase','match','Running')|list|length and uperf.pair  == (server_vms | json_query('resources[].status.interfaces[0].ipAddress')|length)"

  when: resource_state.resources[0].status.state == "Starting Servers" and resource_kind == "vm" and uperf.pair|int == 1

- block:

  - name: Get pod info
    k8s_facts:
      kind: Pod
      api_version: v1
      namespace: '{{ operator_namespace }}'
      label_selectors:
        - type = uperf-bench-server-{{ trunc_uuid }}
    register: server_pods

  - name: Generate uperf xml files
    k8s:
      definition: "{{ lookup('template', 'configmap.yml.j2') | from_yaml }}"

  - block:
    - name: Start Client(s)
      k8s:
        definition: "{{ lookup('template', 'workload.yml.j2') | from_yaml }}"
      with_items: "{{ server_pods.resources }}"
      when: not uperf.serviceip and server_pods.resources|length > 0

    - name: Start Client(s) - ServiceIP
      k8s:
        definition: "{{ lookup('template', 'workload.yml.j2') | from_yaml }}"
      with_items: "{{ serviceip.resources }}"
      when: uperf.serviceip and serviceip.resources|length > 0

    when: resource_kind == "pod"

  - block:

    - name: Wait for vms to be running....
      k8s_facts:
        kind: VirtualMachineInstance
        api_version: kubevirt.io/v1alpha3
        namespace: '{{ operator_namespace }}'
        label_selectors:
          - type = uperf-bench-server-{{ trunc_uuid }}
      register: server_vms


    - name: Generate uperf test files
      k8s:
        definition: "{{ lookup('template', 'configmap_script.yml.j2') | from_yaml }}"
      with_items: "{{ server_vms.resources }}"

    - name: Start Client(s)
      k8s:
        definition: "{{ lookup('template', 'workload_vm.yml.j2') | from_yaml }}"
      with_items: "{{ server_vms.resources }}"
      when: server_vms.resources|length > 0

    when: resource_kind == "vm"

  - k8s_status:
      api_version: ripsaw.cloudbulldozer.io/v1alpha1
      kind: Benchmark
      name: "{{ meta.name }}"
      namespace: "{{ operator_namespace }}"
      status:
        state: Waiting for Clients

  when: resource_state.resources[0].status.state == "Starting Clients"

- block:

  - block:
    - name: Get client pod status
      k8s_facts:
        kind: Pod
        api_version: v1
        namespace: '{{ operator_namespace }}'
        label_selectors:
          - app = uperf-bench-client-{{ trunc_uuid }}
      register: client_pods

    - name: Update resource state
      k8s_status:
        api_version: ripsaw.cloudbulldozer.io/v1alpha1
        kind: Benchmark
        name: "{{ meta.name }}"
        namespace: "{{ operator_namespace }}"
        status:
          state: Clients Running
      when: "uperf.pair == client_pods | json_query('resources[].status[]')|selectattr('phase','match','Running')|list|length and uperf.pair  == (client_pods | json_query('resources[].status.podIP')|length)"

    when: resource_kind == "pod"

  - block:

    - name: set complete to false
      command: "redis-cli set complete false"

    - name: Get client vm status
      k8s_facts:
        kind: VirtualMachineInstance
        api_version: kubevirt.io/v1alpha3
        namespace: '{{ operator_namespace }}'
        label_selectors:
          - app = uperf-bench-client-{{ trunc_uuid }}
      register: client_vms

    - name: Update resource state
      k8s_status:
        api_version: ripsaw.cloudbulldozer.io/v1alpha1
        kind: Benchmark
        name: "{{ meta.name }}"
        namespace: "{{ operator_namespace }}"
        status:
          state: Clients Running
      when: "uperf.pair == client_vms | json_query('resources[].status[]')|selectattr('phase','match','Running')|list|length and uperf.pair  == (client_vm | json_query('resources[].status.interfaces[0].ipAddress')|length)"

    when: resource_kind == "vm"

  when: resource_state.resources[0].status.state == "Waiting for Clients"

- block:

  - name: Signal workload
    command: "redis-cli set start true"

  - name: Update resource state
    k8s_status:
      api_version: ripsaw.cloudbulldozer.io/v1alpha1
      kind: Benchmark
      name: "{{ meta.name }}"
      namespace: "{{ operator_namespace }}"
      status:
        state: "Running"

  when: resource_state.resources[0].status.state == "Clients Running"

- block:
  - block:
    - name: Waiting for pods to complete....
      k8s_facts:
        kind: pod
        api_version: v1
        namespace: '{{ operator_namespace }}'
        label_selectors:
          - app = uperf-bench-client-{{ trunc_uuid }}
      register: client_pods

    - k8s_status:
        api_version: ripsaw.cloudbulldozer.io/v1alpha1
        kind: Benchmark
        name: "{{ meta.name }}"
        namespace: "{{ operator_namespace }}"
        status:
          state: Cleanup
          complete: false
      when: "uperf.pair == (client_pods|json_query('resources[].status[]')|selectattr('phase','match','Succeeded')|list|length)"
    when: resource_kind == "pod"

  - block:

    - name: get complete
      command: "redis-cli get complete"
      register: complete_status

    - k8s_status:
        api_version: ripsaw.cloudbulldozer.io/v1alpha1
        kind: Benchmark
        name: "{{ meta.name }}"
        namespace: "{{ operator_namespace }}"
        status:
          state: Cleanup
          complete: false
      when: complete_status.stdout == "true"
    when: resource_kind == "vm"

  when: resource_state.resources[0].status.state == "Running"

- block:

  - block:
    - name: Get Server Pods
      k8s_facts:
        kind: Pod
        api_version: v1
        namespace: '{{ operator_namespace }}'
        label_selectors:
          - type = uperf-bench-server-{{ trunc_uuid }}
      register: server_pods

    - name: Pod names - to clean
      set_fact:
        clean_pods: |
            [
            {% for item in server_pods.resources %}
              "{{ item['metadata']['name'] }}",
            {% endfor %}
            ]

    - name: Cleanup run
      k8s:
        kind: pod
        api_version: v1
        namespace: '{{ operator_namespace }}'
        state: absent
        name: "{{ item }}"
      with_items: "{{ clean_pods }}"
      when: cleanup
    when: resource_kind == "pod"

  - k8s_status:
      api_version: ripsaw.cloudbulldozer.io/v1alpha1
      kind: Benchmark
      name: "{{ meta.name }}"
      namespace: "{{ operator_namespace }}"
      status:
        state: Complete
        complete: true

  when: resource_state.resources[0].status.state == "Cleanup"
