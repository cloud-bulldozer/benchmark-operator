---

- name: Check for current_run
  stat:
    path: /tmp/current_run
  register: state_file

- debug:
    msg: "State file : {{state_file.stat}}"

- name: Check for status
  set_fact:
    contents: "{{ lookup('file', '/tmp/current_run') }}"
  when: state_file.stat.exists == true

- name: Retrieve previous values
  set_fact:
    prev_values: |
        [
        {% for item in contents %}
          "{{ item }}:{{ contents[item] }}",
        {% endfor %}
        ]
    curr_values: |
        [
        {% for item in uperf %}
          "{{ item }}:{{ uperf[item] }}",
        {% endfor %}
        ]
  when: state_file.stat.exists == true

- debug:
    msg: "Check : {{curr_values}} vs {{prev_values}}"
  when: state_file.stat.exists == true

- block:

  - name: Start Server(s)
    k8s:
      definition: "{{ lookup('template', 'server.yml.j2') | from_yaml }}"
    register: servers
    with_sequence: start=0 count={{uperf.pair}}

  - name: Wait for pods to be running....
    k8s_facts:
      kind: Pod
      api_version: v1
      namespace: '{{ operator_namespace }}'
      label_selectors:
        - app = uperf-bench-server
    register: server_pods
    until: "'Running' in (server_pods | json_query('resources[].status.phase'))"
    retries: 10
    delay: 10

  - name: Generate uperf test
    k8s:
      definition:
        apiVersion: v1
        kind: ConfigMap
        metadata:
          name: uperf-test
          namespace: '{{ operator_namespace }}'
        data:
          uperfXML: "{{ lookup('template', 'uperf-test.xml.j2') }}"

  - name: Start Client(s)
    k8s:
      definition: "{{ lookup('template', 'workload.yml.j2') | from_yaml }}"
    with_items: "{{ server_pods.resources }}"
    when: server_pods.resources|length > 0 and (store_results is not defined or (store_results is defined and not store_results))

  - name: Start Client(s) - store results
    k8s:
      definition: "{{ lookup('template', 'workload_store.yml.j2') | from_yaml }}"
    with_items: "{{ server_pods.resources }}"
    when: server_pods.resources|length > 0 and store_results is defined and store_results

  - name: Waiting for pods to complete....
    k8s_facts:
      kind: pod
      api_version: v1
      namespace: '{{ operator_namespace }}'
      label_selectors:
        - app = uperf-bench-client
    register: client_pods
    until: "'Succeeded' in (client_pods | json_query('resources[].status.phase'))"
    retries: 30
    delay: 10

  - include_role:
      name: result
    when: store_results is defined and store_results

  - name: Pod names - to clean
    set_fact:
      clean_pods: |
          [
          {% for item in server_pods.resources %}
            "{{ item['metadata']['name'] }}",
          {% endfor %}
          ]

  - debug:
      msg: "clean pods : {{clean_pods}}"

  - name: Cleanup run
    k8s:
      kind: pod
      api_version: v1
      namespace: '{{ operator_namespace }}'
      state: absent
      name: "{{ item }}"
    with_items: "{{ clean_pods }}"
    when: cleanup

  - name : Complete run
    copy:
      content: "{{ uperf }}"
      dest: /tmp/current_run

  when: ( uperf.pair > 0 ) and ( state_file.stat.exists == false  or (curr_values | difference(prev_values))|length > 0 )
