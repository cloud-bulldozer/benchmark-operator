---
- name: Start Server(s) 
  k8s:
    definition:
      kind: Deployment
      apiVersion: apps/v1
      metadata:
        name: '{{ meta.name }}-uperf-server-bench'
        namespace: '{{ meta.namespace }}'
      spec:
        replicas: "{{uperf.pair}}"
        selector:
          matchLabels:
            app: bench-server
        template:
          metadata:
            labels:
              app: bench-server
          spec:
            containers:
            - name: bench-server
              image: "quay.io/jtaleric/uperf:testing"
              command: ["/bin/sh"]
              args: ["-c", "uperf -s"]
  when: uperf.pair > 0

- name: Wait for pods to be running....
  k8s_facts:
    kind: Pod
    api_version: v1
    namespace: '{{ meta.namespace }}' 
    label_selectors:
      - app = bench-server
  register: server_pods
  until: "'Running' in (server_pods | json_query('resources[].status.phase'))"
  retries: 5
  delay: 10

- name: Get Running Pod info
  k8s_facts:
    kind: Pod
    api_version: v1
    namespace: '{{ meta.namespace }}' 
    label_selectors:
      - app = bench-server
  register: pods 

- debug:
    msg: "Resources --  {{pods.resources}}"

- name: Generate uperf test
  k8s:
    definition:
      apiVersion: v1
      kind: ConfigMap
      metadata:
        name: uperf-test
        namespace: '{{ meta.namespace }}' 
      data:
        uperfXML: "{{ lookup('template', 'uperf-test.xml.j2') }}"

- name: Start Client(s) 
  k8s:
    definition:
      kind: Pod 
      apiVersion: v1
      metadata:
        name: '{{ meta.name }}-uperf-client-{{item.status.podIP}}'
        namespace: '{{ meta.namespace }}'
        labels:
          app : bench-client
      spec:
       containers:
       - name: bench 
         image: "quay.io/jtaleric/uperf:testing"
         command: ["/bin/sh", "-c"]
         args: 
           - "cat /tmp/uperf-test/uperfXML;
              export h={{item.status.podIP}};
              export proto=tcp;
              uperf -v -x -a -m /tmp/uperf-test/uperfXML -i 1"
         volumeMounts:
         - name: config-volume 
           mountPath: "/tmp/uperf-test"
       volumes:
         - name: config-volume 
           configMap:
             name: uperf-test
       restartPolicy: OnFailure
  when: uperf.pair > 0
  with_items: "{{ pods.resources }}"

- name: Get Running Pod info
  k8s_facts:
    kind: Pod
    api_version: v1
    namespace: '{{ meta.namespace }}' 
    label_selectors:
      - app = bench-client
  register: clients 

