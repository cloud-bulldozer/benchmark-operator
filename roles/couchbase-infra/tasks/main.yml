---

# Install Couchbase Operator (Assume rook is already in place? or should we check?)
- name: Create ClusterRole for the Benchmark User
  k8s:
    definition: "{{ lookup('template', 'cluster-role-benchmark.yaml') }}"
  when: couchbase.servers.size > 0

- name: Create ClusterRoleBinding for the Benchmark User
  k8s:
    definition: "{{ lookup('template', 'cluster-role-binding-benchmark.yaml') }}"
  when: couchbase.servers.size > 0

- name: Create CRD for Couchbase Operator
  k8s:
    definition: "{{ lookup('file', 'crd.yaml') }}"
  when: couchbase.servers.size > 0

- name: Reticulating Splines
  k8s:
    definition:
      apiVersion: v1
      kind: Namespace
      metadata:
        name: "{{ couchbase_namespace }}"
  when: couchbase.servers.size > 0

- name: Create ClusterRole for Service Account
  k8s:
    definition: "{{ lookup('file', 'cluster-role-sa.yaml') }}"
  when: couchbase.servers.size > 0

- name: Create Service Account
  k8s:
    definition:
      apiVersion: v1
      kind: ServiceAccount
      metadata:
        name: couchbase-operator
        namespace: "{{ couchbase_namespace }}"
  when: couchbase.servers.size > 0

- name: Create ClusterRoleBinding for the Service Account
  k8s:
    definition:
      apiVersion: rbac.authorization.k8s.io/v1
      kind: ClusterRoleBinding
      metadata:
        name: couchbase-operator-rolebinding
      roleRef:
        apiGroup: rbac.authorization.k8s.io
        kind: ClusterRole
        name: couchbase-operator
      subjects:
      - kind: ServiceAccount
        name: couchbase-operator
        namespace: "{{ couchbase_namespace }}"
  when: couchbase.servers.size > 0

- name: Create Cluster Role for the user
  k8s:
    definition: "{{ lookup('file', 'cluster-role-user.yaml') }}"
  when: couchbase.servers.size > 0

- name: Create ClusterRoleBinding for the User
  k8s:
    definition:
      apiVersion: rbac.authorization.k8s.io/v1
      kind: ClusterRoleBinding
      metadata:
        name: couchbasecluster-rolebinding
      roleRef:
        apiGroup: rbac.authorization.k8s.io
        kind: ClusterRole
        name: couchbasecluster
  when: couchbase.servers.size > 0

- name: Download Couchbase Operator from operatorhub.io
  get_url:
    url: "https://www.operatorhub.io/install/couchbase-operator.{{ cb_operator_version }}.yaml"
    dest: /tmp/cboperator.yaml
  when: couchbase.servers.size > 0

- name: Deploy Couchbase Operator from operatorhub.io
  k8s:
    src: /tmp/cboperator.yaml
  when: couchbase.servers.size > 0

- name: Wait for Couchbase Operator to be Running....
  k8s_facts:
    kind: Pod
    api_version: v1
    namespace: "{{ couchbase_namespace }}"
    label_selectors:
      - name = couchbase-operator
  register: cb_op_pod
  until: "'Running' in (cb_op_pod | json_query('resources[].status.phase'))"
  retries: 10
  delay: 10
  when: couchbase.servers.size > 0

# Launch Couchbase cluster from operator
- name: Create the cb-example-auth Auth Secret
  k8s:
    definition:
      apiVersion: v1
      kind: Secret
      metadata:
        name: cb-example-auth
        namespace: "{{ couchbase_namespace }}"
      type: Opaque
      data:
        username: QWRtaW5pc3RyYXRvcg==
        password: cGFzc3dvcmQ=
  when: couchbase.servers.size > 0

- name: Create the RH Registry secret
  k8s:
    definition:
      apiVersion: v1
      kind: Secret
      metadata:
        name: rh-catalog
        namespace: "{{ couchbase_namespace }}"
      data:
        .dockerconfigjson: "{{ couchbase.rh_pull_secret }}"
      type: kubernetes.io/dockerconfigjson
  when: couchbase.servers.size > 0 and couchbase.on_openshift

#TODO: Work possibly needed here for PV security requirements
#- name: Get the Project UID Range
#  k8s_facts:
#    api_version: v1
#    kind: Project
#    name: "{{ couchbase_namespace }}"
#    field_selectors:
#      - metadata.annotations.openshift.io/sa.scc.uid-range
#    register: uid_range
#  when: couchbase.servers.size > 0

#TODO: Confirm that we can actually distribute this binary in this way
- name: Get the cbopctl Binary
  copy:
    src: cbopctl
    dest: /tmp/cbopctl
    mode: 0750
  when: couchbase.servers.size > 0

- name: Get the Cluster YAML
  template:
    src: couchbase-cluster.yaml.j2
    dest: /tmp/couchbase-cluster.yaml
    mode: 0640
  when: couchbase.servers.size > 0

- name: Launch Couchbase Cluster from Operator
#  k8s:
#    definition: "{{ lookup('template', 'couchbase-cluster.yaml.j2') }}"
  command: ./cbopctl create -f couchbase-cluster.yaml
  args:
    chdir: /tmp
  register: result
  failed_when: "'already exists' not in result.stdout and 'created' not in result.stdout"
  when: couchbase.servers.size > 0

- name: Wait for Couchbase Cluster to be Up; This may take a while...
  k8s_facts:
    kind: CouchbaseCluster
    api_version: couchbase.com/v1
    namespace: "{{ couchbase_namespace }}"
    name: cb-benchmark
  register: cbc
  until: cbc | json_query('resources[].status.conditions.Available.status') and cbc | json_query('resources[].status.members.ready[]') | length == couchbase.servers.size
  #60 retries with 10 second delays should result in a 10 minute wait time
  retries: 60
  delay: 10
  when: couchbase.servers.size > 0

# For use with YCSB, the username must match the bucket name
# See https://github.com/brianfrankcooper/YCSB/issues/1062#issuecomment-344716601
- name: Set Password for the Default Bucket
  uri:
    url: "http://cb-benchmark.{{ couchbase_namespace }}.svc.cluster.local:8091/settings/web"
    method: POST
    # This is the default couchbase admin user/pass
    user: Administrator
    password: password
    body_format: form-urlencoded
    body:
      username: default
      password: "{{ default_bucket_password }}"
      port: 8091

- name: Set Couchbase Service Hostname
  set_fact:
    couchbase_hostname: "cb-benchmark.{{ couchbase_namespace }}.svc.cluster.local"

- name: Globalize Default Bucket Password Variable
  set_fact:
    default_bucket_password: "{{ default_bucket_password }}"
