---
# Doesn't seem possible to include this from within the role's vars/main.yml file
# This is here until we implement a better solution for the rh-catalog creds.
- include_vars: rh-catalog-auth.yml

# Install Couchbase Operator (Assume rook is already in place? or should we check?)
- name: Create ClusterRole for the Benchmark User
  k8s:
    definition: "{{ lookup('template', 'cluster-role-benchmark.yaml') }}"
  when: couchbase.servers.size > 0

- name: Create ClusterRoleBinding for the Benchmark User
  k8s:
    definition: "{{ lookup('template', 'cluster-role-binding-benchmark.yaml') }}"
  when: couchbase.servers.size > 0

- name: Create CRD for Couchbase Operator
  k8s:
    definition: "{{ lookup('file', 'crd.yaml') }}"
  when: couchbase.servers.size > 0

- name: Reticulating Splines
  k8s:
    definition:
      apiVersion: v1
      kind: Namespace
      metadata:
        name: "{{ couchbase_namespace }}"
  when: couchbase.servers.size > 0

- name: Create ClusterRole for Service Account
  k8s:
    definition: "{{ lookup('file', 'cluster-role-sa.yaml') }}"
  when: couchbase.servers.size > 0

- name: Create Service Account
  k8s:
    definition:
      apiVersion: v1
      kind: ServiceAccount
      metadata:
        name: couchbase-operator
        namespace: "{{ couchbase_namespace }}"
  when: couchbase.servers.size > 0

- name: Create ClusterRoleBinding for the Service Account
  k8s:
    definition:
      apiVersion: rbac.authorization.k8s.io/v1
      kind: ClusterRoleBinding
      metadata:
        name: couchbase-operator-rolebinding
      roleRef:
        apiGroup: rbac.authorization.k8s.io
        kind: ClusterRole
        name: couchbase-operator
      subjects:
      - kind: ServiceAccount
        name: couchbase-operator
        namespace: "{{ couchbase_namespace }}"
  when: couchbase.servers.size > 0

- name: Create Cluster Role for the user
  k8s:
    definition: "{{ lookup('file', 'cluster-role-user.yaml') }}"
  when: couchbase.servers.size > 0

- name: Create ClusterRoleBinding for the User
  k8s:
    definition:
      apiVersion: rbac.authorization.k8s.io/v1
      kind: ClusterRoleBinding
      metadata:
        name: couchbasecluster-rolebinding
      roleRef:
        apiGroup: rbac.authorization.k8s.io
        kind: ClusterRole
        name: couchbasecluster
  when: couchbase.servers.size > 0

#- name: Create ClusterRole for the Benchmark User
#  k8s:
#    definition:
#      apiVersion: rbac.authorization.k8s.io/v1
#      kind: ClusterRole
#      metadata:
#        name: benchmark-operator-for-cb
#        namespace: '{{ meta.namespace }}'
#      rules:
#      - apiGroups:
#        - ""
#        resources:
#        - namespaces
#        verbs:
#        - get
#      - apiGroups:
#        - couchbase.com
#        resources:
#        - couchbaseclusters
#        verbs:
#        - '*'
#  when: couchbase.servers.size > 0

#- name: Create ClusterRoleBinding for the Benchmark User
#  k8s:
#    definition:
#      kind: ClusterRoleBinding
#      apiVersion: rbac.authorization.k8s.io/v1
#      metadata:
#        name: benchmark-operator-for-cb
#      subjects:
#      - kind: ServiceAccount
#        name: benchmark-operator
#        namespace: '{{ meta.namespace }}'
#      roleRef:
#        kind: ClusterRole
#        name: benchmark-operator-for-cb
#        apiGroup: rbac.authorization.k8s.io
#  when: couchbase.servers.size > 0

- name: Download Couchbase Operator from operatorhub.io
  get_url:
    url: "https://www.operatorhub.io/install/couchbase-operator.{{ cb_operator_version }}.yaml"
    dest: /tmp/cboperator.yaml
  when: couchbase.servers.size > 0

- name: Deploy Couchbase Operator from operatorhub.io
  k8s:
    src: /tmp/cboperator.yaml
  when: couchbase.servers.size > 0

- name: Wait for Couchbase Operator to be Running....
  k8s_facts:
    kind: Pod
    api_version: v1
    namespace: "{{ couchbase_namespace }}"
    label_selectors:
      - name = couchbase-operator
  register: cb_op_pod
  until: "'Running' in (cb_op_pod | json_query('resources[].status.phase'))"
  retries: 10
  delay: 10
  when: couchbase.servers.size > 0

# Launch Couchbase cluster from operator
- name: Create the cb-example-auth Auth Secret
  k8s:
    definition:
      apiVersion: v1
      kind: Secret
      metadata:
        name: cb-example-auth
        namespace: "{{ couchbase_namespace }}"
      type: Opaque
      data:
        username: QWRtaW5pc3RyYXRvcg==
        password: cGFzc3dvcmQ=
  when: couchbase.servers.size > 0

# NOTE: The community docker images don't work with OpenShift
#       currently, so we need to auth with the RH catalog
#       and pull the usable image from there.
#       Credentials need to be added to the role vars/rh-catalog-auth.yml as:
#
#rhImageCredentials:
#  registry: registry.connect.redhat.com
#  username: <username>
#  email: <email>
#  password: <password>
#
#FIXME: This is an awful and insecure way to do this
- name: Set rawdockerconfigjson Var
  set_fact:
    rawdockerconfigjson: '{"auths": { "{{ rhImageCredentials.registry }}": {"auth": "{{ (rhImageCredentials.username + ":" + rhImageCredentials.password) | b64encode }}" }}}'
  when: couchbase.servers.size > 0 and couchbase.on_openshift

- name: Create the RH Registry secret
  k8s:
    definition:
      apiVersion: v1
      kind: Secret
      metadata:
        name: rh-catalog
        namespace: "{{ couchbase_namespace }}"
      type: kubernetes.io/dockerconfigjson
      data:
        .dockerconfigjson: "{{ rawdockerconfigjson | to_json | b64encode }}"
  when: couchbase.servers.size > 0 and couchbase.on_openshift

#TODO: Work possibly needed here for PV security requirements
#- name: Get the Project UID Range
#  k8s_facts:
#    api_version: v1
#    kind: Project
#    name: "{{ couchbase_namespace }}"
#    field_selectors:
#      - metadata.annotations.openshift.io/sa.scc.uid-range
#    register: uid_range
#  when: couchbase.servers.size > 0

#TODO: Confirm that we can actually distribute this binary in this way
- name: Get the cbopctl Binary
  copy:
    src: cbopctl
    dest: /tmp/cbopctl
    mode: 0750
  when: couchbase.servers.size > 0

- name: Get the Cluster YAML
  template:
    src: couchbase-cluster.yaml.j2
    dest: /tmp/couchbase-cluster.yaml
    mode: 0640
  when: couchbase.servers.size > 0

- name: Launch Couchbase Cluster from Operator
#  k8s:
#    definition: "{{ lookup('template', 'couchbase-cluster.yaml.j2') }}"
  command: ./cbopctl create -f couchbase-cluster.yaml
  args:
    chdir: /tmp
  register: result
  failed_when: "'already exists' not in result.stdout and 'created' not in result.stdout"
  when: couchbase.servers.size > 0

# Launch YCSB to run workload against Couchbase DB
