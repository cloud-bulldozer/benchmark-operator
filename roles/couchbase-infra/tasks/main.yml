---
- name: Download Couchbase Operator from operatorhub.io
  get_url:
    url: "{{ operator_url }}"
    dest: /tmp/cboperator.yaml

- name: Set namespace for Couchbase
  replace:
    path: /tmp/cboperator.yaml
    regexp: '^(.*)my-couchbase-enterprise(.*)$'
    replace: '\1{{ operator_namespace }}\2'

- name: Deploy Couchbase Operator from operatorhub.io
  k8s:
    src: /tmp/cboperator.yaml

- name: Wait for Couchbase Operator to be Running....
  k8s_facts:
    kind: Pod
    api_version: v1
    namespace: "{{ operator_namespace }}"
    label_selectors:
      - name = couchbase-operator
  register: cb_op_pod
  until: "'Running' in (cb_op_pod | json_query('resources[].status.phase'))"
  retries: 10
  delay: 10

# Launch Couchbase cluster from operator
- name: Create the cb-example-auth Auth Secret
  k8s:
    definition:
      apiVersion: v1
      kind: Secret
      metadata:
        name: cb-example-auth
        namespace: "{{ operator_namespace }}"
      type: Opaque
      data:
        username: QWRtaW5pc3RyYXRvcg==
        password: cGFzc3dvcmQ=

#TODO: Confirm that we can actually distribute this binary in this way
- name: Get the cbopctl Binary
  copy:
    src: cbopctl
    dest: /tmp/cbopctl
    mode: 0750

- name: Get the Cluster YAML
  template:
    src: couchbase-cluster.yaml.j2
    dest: /tmp/couchbase-cluster.yaml
    mode: 0640

# Pre-pull the image to avoid CB operator timeout
- name: Pre-Pull Couchbase Container Image
  k8s:
    definition:
      kind: Job
      apiVersion: batch/v1
      metadata:
        name: cb-image-load
        namespace: "{{ operator_namespace }}"
      spec:
        template:
          spec:
            containers:
            - name: cb-image-load
              image: "{{ pod_baseImage }}:{{ pod_version }}"
              command: ['/bin/true']
            restartPolicy: Never
        backoffLimit: 4

- name: Wait for Pre-Pull Job to Succeed
  k8s_facts:
    kind: Job
    api_version: batch/v1
    namespace: "{{ operator_namespace }}"
    name: cb-image-load
  register: cb_image_load
  until: "cb_image_load | json_query('resources[].status.succeeded')"
  retries: 60
  delay: 10

- name: Launch Couchbase Cluster from Operator
#  k8s:
#    definition: "{{ lookup('template', 'couchbase-cluster.yaml.j2') }}"
  command: ./cbopctl create -f couchbase-cluster.yaml
  args:
    chdir: /tmp
  register: result
  failed_when: "'already exists' not in result.stdout and 'created' not in result.stdout"

- name: Wait for Couchbase Cluster to be Up; This may take a while...
  k8s_facts:
    kind: CouchbaseCluster
    api_version: couchbase.com/v1
    namespace: "{{ operator_namespace }}"
    name: cb-benchmark
  register: cbc
  until: cbc | json_query('resources[].status.conditions.Available.status') and cbc | json_query('resources[].status.members.ready[]') | length == couchbase.servers.size
  #60 retries with 10 second delays should result in a 10 minute wait time
  retries: 60
  delay: 10

# For use with YCSB, the username must match the bucket name
# See https://github.com/brianfrankcooper/YCSB/issues/1062#issuecomment-344716601
- name: Set Password for the Default Bucket
  uri:
    url: "http://cb-benchmark.{{ operator_namespace }}.svc.cluster.local:8091/settings/web"
    method: POST
    # This is the default couchbase admin user/pass
    user: Administrator
    password: password
    body_format: form-urlencoded
    body:
      username: default
      password: "{{ default_bucket_password }}"
      port: 8091

- name: Set Couchbase Service Hostname
  set_fact:
    couchbase_hostname: "cb-benchmark.{{ operator_namespace }}.svc.cluster.local"

- name: Globalize Default Bucket Password Variable
  set_fact:
    default_bucket_password: "{{ default_bucket_password }}"
