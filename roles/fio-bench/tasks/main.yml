---
- set_fact:
    fio_path: /mnt/pvc
  when: fio.storageclass is defined

- set_fact:
    fio_path: /tmp
  when: fio.storageclass is not defined

- name: Generate fio test
  k8s:
    definition:
      apiVersion: v1
      kind: ConfigMap
      metadata:
        name: fio-test
        namespace: '{{ operator_namespace }}'
      data:
        fiojob: "{{ lookup('template', 'job.fio.{{fio.job}}') }}"
  when: ( fio.clients > 0 and fio.job != "custom" )
  register: template_file

- name: Download the custom fio job
  get_url:
    url: "{{ fio.get_url }}"
    dest: /tmp/fio.job
  when: ( fio.clients > 0 and fio.job == "custom" )

- name: Generate Custom fio test
  k8s:
    definition:
      apiVersion: v1
      kind: ConfigMap
      metadata:
        name: fio-test
        namespace: '{{ operator_namespace }}'
      data:
        fiojob: "{{ lookup('file', '/tmp/fio.job') }}"
  when: ( fio.clients > 0 and fio.job == "custom" )

- name: Create PVC(s)
  k8s:
    definition:
      kind: PersistentVolumeClaim
      apiVersion: v1
      metadata:
        name: "claim{{item}}"
        namespace: '{{ operator_namespace }}'
        annotations:
           volume.beta.kubernetes.io/storage-class: "{{fio.storageclass}}"
      spec:
         accessModes:
           - ReadWriteOnce
         resources:
           requests:
             storage: "{{fio.storagesize}}"
  with_sequence: start=1 count={{fio.clients}}
  when: fio.clients > 0 and fio.storageclass is defined

- name: Start client(s)
  k8s:
    definition: "{{ lookup('template', 'client.yml.j2') | from_yaml }}"
  when: fio.clients > 0
  with_sequence: start=1 count={{fio.clients}}

# - name: Wait for fio jobs to finish running....
#   k8s_facts:
#     kind: Job
#     api_version: batch/v1
#     namespace: '{{ operator_namespace }}'
#     label_selectors:
#       - app = fio-benchmark
#   register: client_jobs
#   until: "fio.clients == (client_jobs | json_query('resources[].status.succeeded')|length)"
#   retries: 15
#   delay: 15
#   when: store_results is defined and store_results and fio.job != "custom"
#
# - include_role:
#     name: result
#     tasks_from: fio
#   when: store_results is defined and store_results and fio.job != "custom"
