---
- name: Get current state
  k8s_facts:
    api_version: ripsaw.cloudbulldozer.io/v1alpha1
    kind: Benchmark
    name: '{{ meta.name }}'
    namespace: '{{ operator_namespace }}'
  register: resource_state

- operator_sdk.util.k8s_status:
    api_version: ripsaw.cloudbulldozer.io/v1alpha1
    kind: Benchmark
    name: "{{ meta.name }}"
    namespace: "{{ operator_namespace }}"
    status:
      state: "Init"
      complete: false
  when: resource_state.resources[0].status.state is not defined

- name: Update current state
  k8s_facts:
    api_version: ripsaw.cloudbulldozer.io/v1alpha1
    kind: Benchmark
    name: '{{ meta.name }}'
    namespace: '{{ operator_namespace }}'
  register: resource_state

- name: Capture benchmark operator information
  k8s_facts:
    kind: Pod
    api_version: v1
    namespace: '{{ operator_namespace }}'
    label_selectors:
      - name = benchmark-operator
  register: bo

- name: Set the list of databases to be enumerated
  set_fact:
    enumeration_list: '{{ workload_args.databases }}'

- name: Set enumeration pattern for the numbers of databases
  set_fact:
    enumeration_pattern: '{{ num_databases_pattern }}'

- name: Generate a list of database counts by enumeration pattern
  include_role:
    name: common
    tasks_from: enumeration_by_pattern.yml

- name: Initialize the benchmark environment
  include_tasks: init.yml
  when: resource_state.resources[0].status.state == "Init"

- name: Get the current dbnum list item index from redis
  command: "redis-cli get dbnum_item"
  register: get_dbnum_item

- name: Set dbnum_item fact from the value in redis
  set_fact:
    dbnum_item: "{{ get_dbnum_item.stdout | int }}"

- name: Select the number of databases to test from the numeration list
  set_fact:
    dbnum: "{{ enumeration[dbnum_item|int] | int }}"

- name: Prepare the pgbench workload
  include_tasks: prep_workload.yml
  when: resource_state.resources[0].status.state == "Prep Workload"

- name: Check the pgbench clients status
  include_tasks: check_clients.yml
  when: resource_state.resources[0].status.state == "Check Clients"

- name: Run the pgbench workloads
  include_tasks: run_workload.yml
  when: resource_state.resources[0].status.state == "Run Workload"

#TODO:
#- database passwords are currently provided in plain text in the CR
#- add database warmup cycle
