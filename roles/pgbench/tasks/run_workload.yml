---
- name: Init workload start signal to false
  command: "redis-cli set pgb_start false;"

- name: Init client ready state to empty
  command: "redis-cli del pgb_client_ready"

- name: Calculate timeouts
  include_tasks: calculate_timeouts.yml

- name: Pre-pull pgbench container image
  k8s:
    definition:
      kind: Job
      apiVersion: batch/v1
      metadata:
        name: pgb-image-load-{{ item.0 }}
        namespace: "{{ operator_namespace }}"
        labels:
          app: pgb-image-load
      spec:
        template:
          spec:
            containers:
              - name: pgb-image-load-{{ item.0 }}
                image: "{{ pgb_base_image }}:{{ pgb_version }}"
                command: ['/bin/true']
            restartPolicy: Never
        backoffLimit: 4
  retries: 6
  delay: 10
  with_indexed_items: "{{ pgbench.databases }}"

- name: Wait for pre-pull jobs to succeed
  k8s_facts:
    kind: Job
    api_version: batch/v1
    namespace: "{{ operator_namespace }}"
    name: pgb-image-load-{{ item.0 }}
    #label_selectors:
    #  - app = pgb-image-load
  register: pgb_image_load
  until: "pgb_image_load | json_query('resources[].status.succeeded')"
  retries: 300
  delay: 2
  with_indexed_items: "{{ pgbench.databases }}"

- name: Setup pgbench test job(s)
  k8s:
    definition: "{{ lookup('template', 'templates/workload.yml.j2') }}"
  with_indexed_items: "{{ pgbench.databases }}"
  when: item.0|int in range(dbnum)

- name: Wait for all clients to be ready
  shell: "redis-cli --raw llen pgb_client_ready"
  register: client_ready
  until: client_ready.stdout|int == dbnum|int
  retries: "{{ (load_timeout|int / 10)|int }}"
  delay: 10

- name: Signal workloads to start
  command: "redis-cli set pgb_start true"

- name: Wait for pods to complete
  k8s_facts:
    kind: pod
    api_version: v1
    namespace: '{{ operator_namespace }}'
    label_selectors:
      - app = pgbench-client-{{ trunc_uuid }}
  register: pgbench_pods
  until: "'Succeeded' in (pgbench_pods | json_query('resources[].status.phase'))"
  retries: "{{ (run_timeout|int / 10)|int }}"
  delay: 10
