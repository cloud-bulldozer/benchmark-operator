---
kind: Job
apiVersion: batch/v1
metadata:
  name: 'pgbench-{{ dbnum }}-dbs-client-{{ item.0|int + 1 }}-{{ trunc_uuid }}'
  namespace: '{{ operator_namespace }}'
spec:
  ttlSecondsAfterFinished: 600
  template:
    metadata:
      labels:
        app: pgbench-client-{{ trunc_uuid }}
    spec:
      containers:
      - name: benchmark
        image: "{{ pgb_base_image }}:{{ pgb_version }}"
        env:
          - name: PGPASSWORD
            value: '{{ item.1.password }}'
          - name: uuid
            value: '{{ uuid }}'
          - name: pgbench_auth
            value: >-
                   -h {{ item.1.host }}
                   -p {% if item.1.port is defined and item.1.port|int > 0 %} {{ item.1.port }} {% else %} {{ db_port }} {% endif %}
                   -U {{ item.1.user }}
          - name: test_user
            value: '{{ test_user }}'
          - name: clustername
            value: '{{ clustername }}'
{% if es_server %}
          - name: es
            value: '{{ es_server }}'
          - name: es_port
            value: '{{ es_port }}'
          - name: es_index_prefix
            value: '{{ es_index_prefix }}'
{% endif %}
        imagePullPolicy: Always
        command: ["/bin/sh", "-c"]
        args:
          - "export run_start_timestamp=$(date +%s.%3N);
             echo 'Init Database {{ item.1.host }}/{{ item.1.db_name }}';
             pgbench $pgbench_auth -i -s {{ pgbench.scaling_factor }} {{ init_cmd_flags }} {{ item.1.db_name }};
             if [ $? -eq 0 ]; then
               echo 'Waiting for start signal...';
               redis-cli -h {{ bo.resources[0].status.podIP }} lpush pgb_client_ready {{ item.0|int }};
               while true; do
                 if [[ $(redis-cli -h {{ bo.resources[0].status.podIP }} get pgb_start) =~ 'true' ]]; then
                   echo 'GO!';
                 {% for clients in pgbench.clients %}
                   export database='{{ item.1.host }}/{{ item.1.db_name }}';
                   export description='scaling factor: {{ pgbench.scaling_factor }} | threads: {{ pgbench.threads }} | clients: {{ clients }}'
                   echo '';
                   echo 'Running PGBench with {{ clients }} clients on database {{ item.1.host }}/{{ item.1.db_name }}';
                   for i in `seq 1 {{ pgbench.samples|int }}`; do
                     export sample_start_timestamp=$(date +%s.%3N);
                     echo \"Begin test sample $i of {{ pgbench.samples }}...\";
                     export pgbench_opts=\"$pgbench_auth -c {{ clients }} -j {{ pgbench.threads }} {% if pgbench.transactions is defined and pgbench.transactions|int > 0 %} -t {{ pgbench.transactions }} {% elif run_time|int > 0 %} -T {{ run_time }} {% endif %} -s {{ pgbench.scaling_factor }} {{ cmd_flags }} {{ item.1.db_name }}\";
                     python /opt/snafu/pgbench-wrapper/pgbench-wrapper.py -r $i;
                   done;
                 {% endfor %}
                 else
                   continue;
                 fi;
                 break;
               done;
             fi"
      restartPolicy: OnFailure
{% if item.1.pin_node is defined and item.1.pin_node %}
      nodeSelector:
        kubernetes.io/hostname: '{{ item.1.pin_node }}'
{% endif %}
