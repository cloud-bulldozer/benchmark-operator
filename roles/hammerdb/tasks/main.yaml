---
- name: Get current state
  k8s_facts:
    api_version: ripsaw.cloudbulldozer.io/v1alpha1
    kind: Benchmark
    name: '{{ ansible_operator_meta.name }}'
    namespace: '{{ operator_namespace }}'
  register: resource_state

- operator_sdk.util.k8s_status:
    api_version: ripsaw.cloudbulldozer.io/v1alpha1
    kind: Benchmark
    name: "{{ ansible_operator_meta.name }}"
    namespace: "{{ operator_namespace }}"
    status:
      state: Building
      complete: false
  when: resource_state.resources[0].status.state is not defined

- name: Get current state - If it has changed
  k8s_facts:
    api_version: ripsaw.cloudbulldozer.io/v1alpha1
    kind: Benchmark
    name: '{{ ansible_operator_meta.name }}'
    namespace: '{{ operator_namespace }}'
  register: resource_state

- name: Create PVC(s)
  k8s:
    definition:
      kind: PersistentVolumeClaim
      apiVersion: v1
      metadata:
        name: "claim-{{ trunc_uuid }}"
        namespace: '{{ operator_namespace }}'
        annotations:
          volume.beta.kubernetes.io/storage-class: "{{ workload_args.client_vm.pvc_storageclass }}"
      spec:
        accessModes:
          - "{{ workload_args.client_vm.pvc_pvcaccessmode | default('ReadWriteOnce') }}"
        volumeMode: "{{ workload_args.client_vm.pvc_pvcvolumemode | default('Filesystem') }}"
        resources:
          requests:
            storage: "{{ workload_args.client_vm.pvc_storagesize }}"

  when: workload_args.client_vm.pvc is sameas true

- block:
  - name: template mariadb db creation script
    k8s:
      definition:
        apiVersion: v1
        kind: ConfigMap
        metadata:
          name: '{{ ansible_operator_meta.name }}-creator-{{ trunc_uuid }}'
          namespace: '{{ operator_namespace }}'
        data:
          createdb.tcl: "{{ lookup('template', 'createdb_mariadb.tcl.j2') }}"
    when: (workload_args.db_type == "mariadb")

  - name: template mssql db creation script
    k8s:
      definition:
        apiVersion: v1
        kind: ConfigMap
        metadata:
          name: '{{ ansible_operator_meta.name }}-creator-{{ trunc_uuid }}'
          namespace: '{{ operator_namespace }}'
        data:
          createdb.tcl: "{{ lookup('template', 'createdb_mssql.tcl.j2') }}"
    when: (workload_args.db_type == "mssql")

  - name: template postgresql db creation script
    k8s:
      definition:
        apiVersion: v1
        kind: ConfigMap
        metadata:
          name: '{{ ansible_operator_meta.name }}-creator-{{ trunc_uuid }}'
          namespace: '{{ operator_namespace }}'
        data:
          createdb.tcl: "{{ lookup('template', 'createdb_pg.tcl.j2') }}"
    when: (workload_args.db_type == "pg")

  - name: template mariadb db workload script
    k8s:
      definition:
        apiVersion: v1
        kind: ConfigMap
        metadata:
          name: '{{ ansible_operator_meta.name }}-workload-{{ trunc_uuid }}'
          namespace: '{{ operator_namespace }}'
        data:
          tpcc-workload-mariadb.tcl: "{{ lookup('template', 'tpcc-workload-mariadb.tcl.j2') }}"
    when: (workload_args.db_type == "mariadb")

  - name: template mssql db workload script
    k8s:
      definition:
        apiVersion: v1
        kind: ConfigMap
        metadata:
          name: '{{ ansible_operator_meta.name }}-workload-{{ trunc_uuid }}'
          namespace: '{{ operator_namespace }}'
        data:
          tpcc-workload-mssql.tcl: "{{ lookup('template', 'tpcc-workload-mssql.tcl.j2') }}"
    when: (workload_args.db_type == "mssql")

  - name: template postgresql db workload script
    k8s:
      definition:
        apiVersion: v1
        kind: ConfigMap
        metadata:
          name: '{{ ansible_operator_meta.name }}-workload-{{ trunc_uuid }}'
          namespace: '{{ operator_namespace }}'
        data:
          tpcc-workload-pg.tcl: "{{ lookup('template', 'tpcc-workload-pg.tcl.j2') }}"
    when: (workload_args.db_type == "pg")

  - name: template mssql workload vm
    k8s:
      definition:
        apiVersion: v1
        kind: ConfigMap
        metadata:
          name: '{{ ansible_operator_meta.name }}-mssql-workload-{{ trunc_uuid }}'
          namespace: '{{ operator_namespace }}'
        data:
          run_mssql_script.sh: "{{ lookup('template', 'db_mssql_workload_vm.sh.j2') }}"
    when: workload_args.db_type == "mssql" and resource_kind == "vm"

  - name: template mariadb workload vm
    k8s:
      definition:
        apiVersion: v1
        kind: ConfigMap
        metadata:
          name: '{{ ansible_operator_meta.name }}-mariadb-workload-{{ trunc_uuid }}'
          namespace: '{{ operator_namespace }}'
        data:
          run_mariadb_script.sh: "{{ lookup('template', 'db_mariadb_workload_vm.sh.j2') }}"
    when: workload_args.db_type == "mariadb" and resource_kind == "vm"

  - name: template postgresql workload vm
    k8s:
      definition:
        apiVersion: v1
        kind: ConfigMap
        metadata:
          name: '{{ ansible_operator_meta.name }}-postgres-workload-{{ trunc_uuid }}'
          namespace: '{{ operator_namespace }}'
        data:
          run_postgres_script.sh: "{{ lookup('template', 'db_postgres_workload_vm.sh.j2') }}"
    when: workload_args.db_type == "pg" and resource_kind == "vm"

  - operator_sdk.util.k8s_status:
      api_version: ripsaw.cloudbulldozer.io/v1alpha1
      kind: Benchmark
      name: "{{ ansible_operator_meta.name }}"
      namespace: "{{ operator_namespace }}"
      status:
        state: Starting DB
        complete: false
    when: workload_args.db_init is defined and workload_args.db_init

  - operator_sdk.util.k8s_status:
      api_version: ripsaw.cloudbulldozer.io/v1alpha1
      kind: Benchmark
      name: "{{ ansible_operator_meta.name }}"
      namespace: "{{ operator_namespace }}"
      status:
        state: Starting DB Workload
        complete: false
    when: workload_args.db_benchmark is defined and workload_args.db_benchmark and (workload_args.db_init is not defined or not workload_args.db_init)

  - operator_sdk.util.k8s_status:
      api_version: ripsaw.cloudbulldozer.io/v1alpha1
      kind: Benchmark
      name: "{{ ansible_operator_meta.name }}"
      namespace: "{{ operator_namespace }}"
      status:
        state: ConfigMaps Created
        complete: true
    when: (workload_args.db_benchmark is not defined or not workload_args.db_benchmark) and (workload_args.db_init is not defined or not workload_args.db_init)

  when: resource_state.resources[0].status.state == "Building"

- block:
  - block:
    - name: start db creation job
      k8s:
        state: present
        definition: "{{ lookup('template', 'db_creation.yml') | from_yaml }}"

    when: resource_kind == "pod"

  - block:
    - name: set complete to false
      command: "redis-cli set db-creation-{{trunc_uuid}} false"

    - name: start mssql db creation vm job
      k8s:
        state: present
        definition: "{{ lookup('template', 'db_creation_mssql_vm.yml') | from_yaml }}"
      when: (workload_args.db_type == "mssql")

    - name: start mariadb db creation vm job
      k8s:
        state: present
        definition: "{{ lookup('template', 'db_creation_mariadb_vm.yml') | from_yaml }}"
      when: (workload_args.db_type == "mariadb")

    - name: start postgres db creation vm job
      k8s:
        state: present
        definition: "{{ lookup('template', 'db_creation_postgres_vm.yml') | from_yaml }}"
      when: (workload_args.db_type == "pg")

    when: resource_kind == "vm"

  - operator_sdk.util.k8s_status:
      api_version: ripsaw.cloudbulldozer.io/v1alpha1
      kind: Benchmark
      name: "{{ ansible_operator_meta.name }}"
      namespace: "{{ operator_namespace }}"
      status:
        state: DB Creating
        complete: false

  when: resource_state.resources[0].status.state == "Starting DB"


- block:
  - block:
    - name: wait for db creation job to finish
      k8s_facts:
        kind: Job
        api_version: batch/v1
        name: '{{ ansible_operator_meta.name }}-creator-{{ trunc_uuid }}'
        namespace: "{{ operator_namespace }}"
      register: hammerdb_creator_pod

    - operator_sdk.util.k8s_status:
        api_version: ripsaw.cloudbulldozer.io/v1alpha1
        kind: Benchmark
        name: "{{ ansible_operator_meta.name }}"
        namespace: "{{ operator_namespace }}"
        status:
          state: Starting DB Workload
          complete: false
      when: hammerdb_creator_pod | json_query('resources[].status.succeeded') and workload_args.db_benchmark is defined and workload_args.db_benchmark

    - operator_sdk.util.k8s_status:
        api_version: ripsaw.cloudbulldozer.io/v1alpha1
        kind: Benchmark
        name: "{{ ansible_operator_meta.name }}"
        namespace: "{{ operator_namespace }}"
        status:
          state: DB Created
          complete: true
      when: hammerdb_creator_pod | json_query('resources[].status.succeeded') and (workload_args.db_benchmark is not defined or not workload_args.db_benchmark)
    when: resource_kind == "pod"

  - block:
    - operator_sdk.util.k8s_status:
        api_version: ripsaw.cloudbulldozer.io/v1alpha1
        kind: Benchmark
        name: "{{ ansible_operator_meta.name }}"
        namespace: "{{ operator_namespace }}"
        status:
          state: Starting DB Workload
          complete: false

    - name: get complete
      command: "redis-cli get db-creation-{{trunc_uuid}}"
      register: db_creation_status

    - operator_sdk.util.k8s_status:
        api_version: ripsaw.cloudbulldozer.io/v1alpha1
        kind: Benchmark
        name: "{{ ansible_operator_meta.name }}"
        namespace: "{{ operator_namespace }}"
        status:
          state: DB Created
          complete: false
      when: db_creation_status.stdout == "true"
    when: resource_kind == "vm"
  when: resource_state.resources[0].status.state == "DB Creating"

- block:
  - name: set complete to false
    command: "redis-cli set complete false"
    when: resource_kind == "vm"

  - name: start mssql db workload job
    k8s:
      state: present
      definition: "{{ lookup('template', 'db_mssql_workload.yml.j2') | from_yaml }}"
    when: workload_args.db_type == "mssql" and resource_kind == "pod"

  - name: start mariadb db workload job
    k8s:
      state: present
      definition: "{{ lookup('template', 'db_mariadb_workload.yml.j2') | from_yaml }}"
    when: workload_args.db_type == "mariadb" and resource_kind == "pod"

  - name: start postgresql db workload job
    k8s:
      state: present
      definition: "{{ lookup ('template', 'db_postgres_workload.yml.j2') | from_yaml }}"
    when: workload_args.db_type == "pg" and resource_kind == "pod"

  - operator_sdk.util.k8s_status:
      api_version: ripsaw.cloudbulldozer.io/v1alpha1
      kind: Benchmark
      name: "{{ ansible_operator_meta.name }}"
      namespace: "{{ operator_namespace }}"
      status:
        state: DB workload running
        complete: false

  when: resource_state.resources[0].status.state == "Starting DB Workload"

- block:
  - block:
    - name: wait for db workload job to finish
      k8s_facts:
        kind: Job
        api_version: batch/v1
        name: '{{ ansible_operator_meta.name }}-workload-{{ trunc_uuid }}'
        namespace: "{{ operator_namespace }}"
      register: hammerdb_workload_pod

    - operator_sdk.util.k8s_status:
        api_version: ripsaw.cloudbulldozer.io/v1alpha1
        kind: Benchmark
        name: "{{ ansible_operator_meta.name }}"
        namespace: "{{ operator_namespace }}"
        status:
          state: DB Workload Complete
          complete: true
      when: "hammerdb_workload_pod | json_query('resources[].status.succeeded')"
    when: resource_kind == "pod"

  - block:
    - name: get complete
      command: "redis-cli get complete"
      register: complete_status

    - operator_sdk.util.k8s_status:
        api_version: ripsaw.cloudbulldozer.io/v1alpha1
        kind: Benchmark
        name: "{{ ansible_operator_meta.name }}"
        namespace: "{{ operator_namespace }}"
        status:
          state: DB Workload Complete
          complete: true
      when: complete_status.stdout == "true"
    when: resource_kind == "vm"

  when: resource_state.resources[0].status.state == "DB workload running"
