proc runtimer { seconds } {
set x 0
set timerstop 0
while {!$timerstop} {
incr x
after 1000
  if { ![ expr {$x % 60} ] } {
          set y [ expr $x / 60 ]
          puts "Timer: $y minutes elapsed"
  }
update
if {  [ vucomplete ] || $x eq $seconds } { set timerstop 1 }
    }

return
}

puts "SETTING DB CONFIGURATION"
dbset db mysql
dbset bm TPC-C

puts "SETTING CONNECTION OPTIONS"
diset connection mysql_host {{workload_args.db_server}}
diset connection mysql_port {{workload_args.db_port}}

puts "SETTING BENCHMARK OPTIONS"
diset tpcc mysql_count_ware {{workload_args.db_warehouses}}
diset tpcc mysql_num_vu {{workload_args.db_num_workers}}
diset tpcc mysql_user {{workload_args.db_user}}
diset tpcc mysql_pass {{workload_args.db_pass}}
diset tpcc mysql_dbase {{workload_args.db_name}}
diset tpcc mysql_storage_engine {{workload_args.db_mysql_storage_engine}}
diset tpcc mysql_partition {{workload_args.db_mysql_partition}}
diset tpcc mysql_total_iterations {{workload_args.transactions}}
diset tpcc mysql_raiseerror {{workload_args.raiseerror}}
diset tpcc mysql_keyandthink {{workload_args.keyandthink}}
diset tpcc mysql_driver {{workload_args.driver}}
diset tpcc mysql_rampup {{workload_args.rampup}}
diset tpcc mysql_duration {{workload_args.runtime}}
diset tpcc mysql_allwarehouse {{workload_args.allwarehouse}}
diset tpcc mysql_timeprofile {{workload_args.timeprofile}}
diset tpcc mysql_async_scale {{workload_args.async_scale}}
diset tpcc mysql_async_client {{workload_args.async_client}}
diset tpcc mysql_async_verbose {{workload_args.async_verbose}}
diset tpcc mysql_async_delay {{workload_args.async_delay}}
diset connection mysql_socket {{workload_args.db_mysql_socket}}
vuset logtotemp 1

loadscript
puts "SEQUENCE STARTED"

set workers {{workload_args.db_num_workers}}
set transactions {{workload_args.transactions}}
set samples {{workload_args.samples}}

# So we are increasing the number of workers in the outer loop while
# we run the samples in the inner loop

for {set w 1} { $w <= $workers } { set w [expr {$w*2}] } {
puts "$w VU TEST"
for {set i 1} {$i <= $samples} {incr i} {
	puts "============ RUNNING SAMPLE $i: $w WORKERS ============"
	vuset vu $w
	vucreate
	vurun
	# runtimer in seconds must exceed rampup + duration
	# so we're doing the math here: (runtime + rampup) * 60 give us the total in seconds. As a security factor we multiply by 1.05
	set calculation [expr { ( {{workload_args.rampup}} + {{workload_args.runtime}} ) * 60 * 1.4 }]
	set runtimer_seconds [expr int($calculation)]
	runtimer $runtimer_seconds
	runtimer 350
	vudestroy
	after 5000
	}
}
puts "SEQUENCE COMPLETE"
