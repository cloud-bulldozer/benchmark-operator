---
apiVersion: v1
kind: List
metadata: {}
items:
{% macro job_template(item, node_idx_item='') %}
  - kind: Service
    apiVersion: v1
    metadata:
{% if (worker_node_list[node_idx_item]|length>27) and (worker_node_list[node_idx_item][26] == '.') %}
      name: uperf-scale-service-{{worker_node_list[node_idx_item] | truncate(26,true,'') | replace('.','-')}}-{{ item }}-{{ trunc_uuid }}
{% else %}
      name: uperf-scale-service-{{worker_node_list[node_idx_item] | truncate(27,true,'') | replace('.','-')}}-{{ item }}-{{ trunc_uuid }}
{% endif %}
      namespace: '{{ operator_namespace }}'
      labels:
        benchmark-uuid: {{ uuid }}
        benchmark-operator-workload: uperf-scale
        index: "{{ item }}"
{% if (worker_node_list[node_idx_item]|length>27) and (worker_node_list[node_idx_item][26] == '.') %}
        app: uperf-scale-bench-server-{{ worker_node_list[node_idx_item] | truncate(26,true,'')}}-{{ item }}-{{ trunc_uuid }}
{% else %}
        app: uperf-scale-bench-server-{{ worker_node_list[node_idx_item] | truncate(27,true,'')}}-{{ item }}-{{ trunc_uuid }}
{% endif %}
        type: {{ ansible_operator_meta.name }}-bench-server-{{ trunc_uuid }}
      annotations:
        node_idx: '{{ node_idx_item }}'
        pod_idx: '{{ item }}'
        metallb.universe.tf/address-pool: '{{ workload_args.metallb.addresspool | default("addresspool-l2") }}'
        metallb.universe.tf/allow-shared-ip: uperf-scale-service-{{ item }}-{{ trunc_uuid }}
    spec:
      selector:
{% if (worker_node_list[node_idx_item]|length>27) and (worker_node_list[node_idx_item][26] == '.') %}
        app: uperf-scale-bench-server-{{worker_node_list[node_idx_item] | truncate(26,true,'')}}-{{ item }}-{{ trunc_uuid }}
{% else %}
        app: uperf-scale-bench-server-{{worker_node_list[node_idx_item] | truncate(27,true,'')}}-{{ item }}-{{ trunc_uuid }}
{% endif %}
      externalTrafficPolicy: '{{ workload_args.metallb.service_etp | default("Cluster") }}'
      type: LoadBalancer
      ports:
      - name: uperf-scale
        port: 30000
        targetPort: 30000
        protocol: TCP
{% for num in range(30001,30012,1) %}
      - name: uperf-scale-control-tcp-{{num}}
        port: {{num}}
        targetPort: {{num}}
        protocol: TCP
{% endfor %}
  - kind: Service
    apiVersion: v1
    metadata:
      name:  uperf-scale-service-{{ item }}-{{ trunc_uuid }}-udp
      namespace: '{{ operator_namespace }}'
      labels:
        benchmark-uuid: {{ uuid }}
        benchmark-operator-workload: uperf-scale
        index: "{{ item }}"
{% if (worker_node_list[node_idx_item]|length>27) and (worker_node_list[node_idx_item][26] == '.') %}
        app: uperf-scale-bench-server-{{ worker_node_list[node_idx_item] | truncate(26,true,'')}}-{{ item }}-{{ trunc_uuid }}
{% else %}
        app: uperf-scale-bench-server-{{ worker_node_list[node_idx_item] | truncate(27,true,'')}}-{{ item }}-{{ trunc_uuid }}
{% endif %}
        type: {{ ansible_operator_meta.name }}-bench-server-{{ trunc_uuid }}-udp
      annotations:
        node_idx: '{{ node_idx_item }}'
        pod_idx: '{{ item }}'
        metallb.universe.tf/address-pool: '{{ workload_args.metallb.addresspool | default("addresspool-l2") }}'
        metallb.universe.tf/allow-shared-ip: uperf-scale-service-{{ item }}-{{ trunc_uuid }}
    spec:
      selector:
{% if (worker_node_list[node_idx_item]|length>27) and (worker_node_list[node_idx_item][26] == '.') %}
        app: uperf-scale-bench-server-{{worker_node_list[node_idx_item] | truncate(26,true,'')}}-{{ item }}-{{ trunc_uuid }}
{% else %}
        app: uperf-scale-bench-server-{{worker_node_list[node_idx_item] | truncate(27,true,'')}}-{{ item }}-{{ trunc_uuid }}
{% endif %}
      externalTrafficPolicy: '{{ workload_args.metallb.service_etp | default("Cluster") }}'
      type: LoadBalancer
      ports:
      - name: uperf-scale
        port: 30000
        targetPort: 30000
        protocol: UDP
{% for num in range(30001,30012,1) %}
      - name: uperf-scale-control-tcp-{{num}}
        port: {{num}}
        targetPort: {{num}}
        protocol: UDP
{% endfor %}
{% endmacro %}
{% for node_idx_item in range(node_sequence|int)  %}
{% for item in range(pod_sequence|int)  %}
{{ job_template(item,node_idx_item) }}
{% endfor %}
{% endfor %}
