---
- name: Get current state
  k8s_info:
    api_version: ripsaw.cloudbulldozer.io/v1alpha1
    kind: Benchmark
    name: '{{ ansible_operator_meta.name }}'
    namespace: '{{ operator_namespace }}'
  register: resource_state

- name: Define variables
  set_fact:
    servicemesh: "{{ servicemesh_defaults | combine(workload_args, recursive=True) }}"
    controlplane_namespace: "{{ ansible_operator_meta.name }}-controlplane-{{ trunc_uuid }}"
    workload_namespace: "{{ ansible_operator_meta.name }}-workload-{{ trunc_uuid }}"
    owner:
      - apiVersion: ripsaw.cloudbulldozer.io/v1alpha1
        kind: Benchmark
        name: "{{ ansible_operator_meta.name }}"
        namespace: "{{ operator_namespace }}"
        uid: "{{ resource_state.resources[0].metadata.uid }}"

- when: resource_state.resources[0].status.state is not defined
  block:
  - name: Create control plane namespace
    k8s:
      definition:
        apiVersion: project.openshift.io/v1
        kind: ProjectRequest
        metadata:
          name: "{{ controlplane_namespace }}"

  - name: Create ServiceMesh control plane
    k8s:
      definition: "{{ lookup('template', 'smcp.yaml.j2') | from_yaml }}"

  - name: Create workload namespace
    k8s:
      definition:
        apiVersion: project.openshift.io/v1
        kind: ProjectRequest
        metadata:
          name: "{{ workload_namespace }}"

  - name: Create member roll
    k8s:
      definition:
        apiVersion: maistra.io/v1
        kind: ServiceMeshMemberRoll
        metadata:
          name: default
          namespace: "{{ controlplane_namespace }}"
        spec:
          members:
          - "{{ workload_namespace }}"

  - name: Create Hyperfoil resource
    k8s:
      definition:
        apiVersion: hyperfoil.io/v1alpha2
        kind: Hyperfoil
        metadata:
          name: '{{ ansible_operator_meta.name }}-hyperfoil-{{ trunc_uuid }}'
          namespace: '{{ operator_namespace }}'
          ownerReferences: "{{ owner }}"
        spec:
          version: "{{ servicemesh.hyperfoil_version }}"

  - name: Set state to Init
    operator_sdk.util.k8s_status:
      api_version: ripsaw.cloudbulldozer.io/v1alpha1
      kind: Benchmark
      name: "{{ ansible_operator_meta.name }}"
      namespace: "{{ operator_namespace }}"
      status:
        state: "Init"
        complete: false

# Note: register is invoked even if the task is skipped; therefore we'll update the state non-conditionally
- name: Update current state
  k8s_info:
    api_version: ripsaw.cloudbulldozer.io/v1alpha1
    kind: Benchmark
    name: '{{ ansible_operator_meta.name }}'
    namespace: '{{ operator_namespace }}'
  register: resource_state

- when: resource_state.resources[0].status.state == "Init"
  block:
  - name: Check Hyperfoil-status
    k8s_info:
      api_version: hyperfoil.io/v1alpha2
      kind: Hyperfoil
      name: "{{ ansible_operator_meta.name }}-hyperfoil-{{ trunc_uuid }}"
      namespace: '{{ operator_namespace }}'
    register: hf_state

  - name: Check ServiceMesh control plane
    k8s_info:
      api_version: maistra.io/v1
      kind: ServiceMeshControlPlane
      name: '{{ ansible_operator_meta.name }}'
      namespace: "{{ controlplane_namespace }}"
    register: smcp_state

  - set_fact:
      smcp_ready: "{{ smcp_state | json_query('resources[0].status.conditions[]') | selectattr('type','match','Ready') | selectattr('status', 'match', 'True') | list | length > 0 }}"

  - name: Progress to deploy
    when: hf_state.resources[0].status.status == "Ready" and smcp_ready
    operator_sdk.util.k8s_status:
      api_version: ripsaw.cloudbulldozer.io/v1alpha1
      kind: Benchmark
      name: "{{ ansible_operator_meta.name }}"
      namespace: "{{ operator_namespace }}"
      status:
        state: "Deploy"
        complete: false

- name: Update current state
  k8s_info:
    api_version: ripsaw.cloudbulldozer.io/v1alpha1
    kind: Benchmark
    name: '{{ ansible_operator_meta.name }}'
    namespace: '{{ operator_namespace }}'
  register: resource_state

- name: Check ingress route
  k8s_info:
    api_version: route.openshift.io/v1
    kind: Route
    name: istio-ingressgateway
    namespace: '{{ controlplane_namespace }}'
  register: ingress_route

- name: Set app route
  when: ingress_route.resources | length > 0
  set_fact:
    #TODO: maybe use trunc_uuid in the hostname?
    app_route: "{{ ansible_operator_meta.name }}-app-{{ trunc_uuid}}{{ ingress_route.resources[0].status.ingress[0].host | regex_replace('^[^.]*', '')}}"

- when: resource_state.resources[0].status.state == "Deploy"
  block:
  - name: Generate certificates
    command: openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout /tmp/app.key -out /tmp/app.crt -subj "/CN={{ app_route }}/O=app"

  - name: Create ingressgateway certs secret
    k8s:
      definition:
        apiVersion: v1
        kind: Secret
        metadata:
          name: istio-ingressgateway-certs
          namespace: "{{ controlplane_namespace }}"
          ownerReferences: "{{ owner }}"
        data:
          tls.key: "{{ lookup('file', '/tmp/app.key') | b64encode }}"
          tls.crt: "{{ lookup('file', '/tmp/app.crt') | b64encode }}"

  - name: Get ingress gateway pods
    k8s_info:
      api_version: v1
      kind: Pod
      namespace: "{{ controlplane_namespace }}"
      label_selectors:
      - istio = ingressgateway
    register: ingressgateways

  - name: Reboot ingress gateway(s)
    with_items: "{{ ingressgateways.resources | map(attribute='metadata.name') | list }}"
    k8s:
      state: absent
      api_version: v1
      kind: Pod
      name: "{{ item }}"
      namespace: "{{ controlplane_namespace }}"

  - name: Create deployments
    k8s:
      definition: "{{ lookup('template', 'dc.yaml.j2') | from_yaml }}"

  - name: Create routing resources
    k8s:
      definition: "{{ lookup('template', 'routing.yaml.j2') | from_yaml }}"

  - name: Fetch pods
    k8s_info:
      api_version: v1
      kind: Pod
      namespace: '{{ workload_namespace }}'
      label_selectors:
      - app = app
    register: pods

  - set_fact:
      ready_containers: "{{ pods.resources | map(attribute='status.containerStatuses') | flatten | selectattr('ready', 'equalto', true) | list | length }}"
      expected_containers: "{{ 2 * servicemesh.deployments * servicemesh.pods_per_deployment }}"

  - name: Progress to ready
    when: ready_containers == expected_containers
    operator_sdk.util.k8s_status:
      api_version: ripsaw.cloudbulldozer.io/v1alpha1
      kind: Benchmark
      name: "{{ ansible_operator_meta.name }}"
      namespace: "{{ operator_namespace }}"
      status:
        state: "Ready"
        complete: false

- name: Update current state
  k8s_info:
    api_version: ripsaw.cloudbulldozer.io/v1alpha1
    kind: Benchmark
    name: '{{ ansible_operator_meta.name }}'
    namespace: '{{ operator_namespace }}'
  register: resource_state

- when: resource_state.resources[0].status.state == "Ready"
  block:
  - name: "Expand test template into config map"
    k8s:
      state: present
      definition:
        apiVersion: v1
        kind: ConfigMap
        metadata:
          name: "{{ ansible_operator_meta.name }}-test-{{ trunc_uuid }}"
          namespace: '{{ operator_namespace }}'
          ownerReferences: "{{ owner }}"
        data:
          test.hf.yaml: "{{ lookup('template', servicemesh.test_name + '.hf.yaml.j2') }}"
          run.sh: "{{ lookup('file', 'run.sh') }}"

  - name: Get info about Hyperfoil controller pod
    k8s_info:
      api_version: v1
      kind: Pod
      namespace: '{{ operator_namespace }}'
      label_selectors:
      - app = {{ ansible_operator_meta.name }}-hyperfoil-{{ trunc_uuid }}
      - role = controller
    register: hf_pod

  - name: "Create job"
    k8s:
      definition: "{{ lookup('template', 'job.yaml.j2') | from_yaml }}"

  - name: Progress to running
    operator_sdk.util.k8s_status:
      api_version: ripsaw.cloudbulldozer.io/v1alpha1
      kind: Benchmark
      name: "{{ ansible_operator_meta.name }}"
      namespace: "{{ operator_namespace }}"
      status:
        state: "Running"
        complete: false

- name: Update current state
  k8s_info:
    api_version: ripsaw.cloudbulldozer.io/v1alpha1
    kind: Benchmark
    name: '{{ ansible_operator_meta.name }}'
    namespace: '{{ operator_namespace }}'
  register: resource_state

- when: resource_state.resources[0].status.state == "Running"
  block:
  - name: Get job status
    k8s_info:
      api_version: v1
      kind: Job
      namespace: '{{ operator_namespace }}'
      name: "{{ ansible_operator_meta.name }}-{{ trunc_uuid }}"
    register: job_state

  - name: Complete benchmark
    when: job_state.resources[0].status.succeeded is defined and (job_state.resources[0].status.succeeded | int) > 0
    operator_sdk.util.k8s_status:
      api_version: ripsaw.cloudbulldozer.io/v1alpha1
      kind: Benchmark
      name: "{{ ansible_operator_meta.name }}"
      namespace: "{{ operator_namespace }}"
      status:
        state: "Complete"
        complete: true

  - name: Fail benchmark
    when: job_state.resources[0].status.failed is defined and (job_state.resources[0].status.failed | int) > 0
    operator_sdk.util.k8s_status:
      api_version: ripsaw.cloudbulldozer.io/v1alpha1
      kind: Benchmark
      name: "{{ ansible_operator_meta.name }}"
      namespace: "{{ operator_namespace }}"
      status:
        state: "Failed"
        complete: true

- name: Update current state
  k8s_info:
    api_version: ripsaw.cloudbulldozer.io/v1alpha1
    kind: Benchmark
    name: '{{ ansible_operator_meta.name }}'
    namespace: '{{ operator_namespace }}'
  register: resource_state

- when: resource_state.resources[0].status.state == "Complete" and cleanup
  block:
  - name: Delete Hyperfoil resource
    k8s:
      state: absent
      definition:
        apiVersion: hyperfoil.io/v1alpha2
        kind: Hyperfoil
        metadata:
          name: '{{ ansible_operator_meta.name }}-hyperfoil-{{ trunc_uuid }}'
          namespace: '{{ operator_namespace }}'

  - name: Delete config map
    k8s:
      state: absent
      definition:
        apiVersion: v1
        kind: ConfigMap
        metadata:
          name: '{{ ansible_operator_meta.name }}-test-{{ trunc_uuid }}'
          namespace: '{{ operator_namespace }}'

  - name: Delete workload namespace
    k8s:
      state: absent
      definition:
        apiVersion: project.openshift.io/v1
        kind: Project
        metadata:
          name: '{{ workload_namespace }}'

  - name: Delete control plane namespace
    k8s:
      state: absent
      definition:
        apiVersion: project.openshift.io/v1
        kind: Project
        metadata:
          name: '{{ controlplane_namespace }}'
