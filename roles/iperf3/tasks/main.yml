---
- block:

  - name: Start Server(s)
    k8s:
      definition: "{{ lookup('template', 'server.yml.j2') | from_yaml }}"
    with_sequence: start=1 count={{ workload_args.pairs|default('1')|int }}

  - include_role:
      name: benchmark_state
      tasks_from: set_state
    vars:
      state: "Starting Server"

  when: benchmark_state.resources[0].status.state == "Building"

- block:

  - name: Wait for pods to be running....
    k8s_info:
      kind: Pod
      api_version: v1
      namespace: '{{ operator_namespace }}'
      label_selectors:
        - app = iperf3-bench-server-{{ trunc_uuid }}
    register: server_pods

  - include_role:
      name: benchmark_state
      tasks_from: set_state
    vars:
      state: "Starting Clients"
    when: "workload_args.pairs|default('1')|int == (server_pods | json_query('resources[].status.podIP')|length) and (server_pods | json_query('resources[].status.phase') is defined and workload_args.pairs|default('1')|int == server_pods | json_query('resources[].status[]')|selectattr('phase','match','Running')|list|length)"

  when: benchmark_state.resources[0].status.state == "Starting Server"

- block:

  - name: Get server pods
    k8s_info:
      kind: Pod
      api_version: v1
      namespace: '{{ operator_namespace }}'
      label_selectors:
        - app = iperf3-bench-server-{{ trunc_uuid }}
    register: server_pods

  - name: Start Client(s)
    k8s:
      definition: "{{ lookup('template', 'client.yml.j2') | from_yaml }}"
    with_items: "{{ server_pods.resources }}"

  - include_role:
      name: benchmark_state
      tasks_from: set_state
    vars:
      state: "Waiting for Clients"

  when: benchmark_state.resources[0].status.state == "Starting Clients"

- block:

  - name: Wait for pods to be running....
    k8s_info:
      kind: Pod
      api_version: v1
      namespace: '{{ operator_namespace }}'
      label_selectors:
        - app = iperf3-bench-client-{{ trunc_uuid }}
    register: client_pods

  - include_role:
      name: benchmark_state
      tasks_from: set_state
    vars:
      state: Running
    when: client_pods.resources|length > 0

  when: ( workload_args.pairs|default('1')|int > 0 ) and benchmark_state.resources[0].status.state == "Waiting for Clients"

- include_role:
    name: benchmark_state
    tasks_from: completed.yml
  when: benchmark_state.resources[0].status.state == "Running"
