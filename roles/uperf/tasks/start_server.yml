---

- block:
  ### <POD> kind
  - include_tasks: init.yml

  - name: Create service for server pods
    k8s:
      definition: "{{ lookup('template', 'service.yml.j2') | from_yaml }}"
    vars:
      pod_sequence: "{{ pod_hi_idx|int +1 }}"
      node_sequence: "{{ node_hi_idx|int +1 }}"

    when: workload_args.serviceip is defined and workload_args.serviceip

  - name: Start Server(s) - total = eligible nodes * density
    k8s:
       definition: "{{ lookup('template', 'server.yml.j2') | from_yaml }}"
    vars:
      pod_sequence: "{{ pod_hi_idx|int +1 }}"
      node_sequence: "{{ node_hi_idx|int +1 }}"

    #
    # Each server annotates a "node_idx" which will allow its peer client
    # to derive its affinity according the 'colocate' variable
    #
  - name: Wait for pods to be running....
    k8s_facts:
      kind: Pod
      api_version: v1
      namespace: '{{ operator_namespace }}'
      label_selectors:
        - type = {{ ansible_operator_meta.name }}-bench-server-{{ trunc_uuid }}
    register: server_pods

  - name: Update resource state
    operator_sdk.util.k8s_status:
      api_version: ripsaw.cloudbulldozer.io/v1alpha1
      kind: Benchmark
      name: "{{ ansible_operator_meta.name }}"
      namespace: "{{ operator_namespace }}"
      status:
        state: "Starting Servers"

  when: resource_kind == "pod"
 
- block:
  ### <VM} kind remains as-is w/o "scale" mode
  - name: Start Server(s)
    k8s:
      definition: "{{ lookup('template', 'server_vm.yml.j2') | from_yaml }}"
    register: servers
    with_sequence: start=0 count={{ workload_args.pair | default('1')|int }}

  - name: Wait for vms to be running....
    k8s_facts:
      kind: VirtualMachineInstance
      api_version: kubevirt.io/v1alpha3
      namespace: '{{ operator_namespace }}'
      label_selectors:
        - type = {{ ansible_operator_meta.name }}-bench-server-{{ trunc_uuid }}
    register: server_vms

  - name: Update resource state
    operator_sdk.util.k8s_status:
      api_version: ripsaw.cloudbulldozer.io/v1alpha1
      kind: Benchmark
      name: "{{ ansible_operator_meta.name }}"
      namespace: "{{ operator_namespace }}"
      status:
        state: "Starting Servers"

  when: resource_kind == "vm"

