---

- block:
  ### <POD> kind
  # Cleanup servers, but leave clients around mostly for further examining of results.
  - name: Get Server Jobs
    k8s_facts:
      kind: Job
      api_version: v1
      namespace: '{{ operator_namespace }}'
      label_selectors:
        - type = {{ ansible_operator_meta.name }}-bench-server-{{ trunc_uuid }}
    register: server_jobs

  - name: Get Server Pods
    k8s_facts:
      kind: Pod
      api_version: v1
      namespace: '{{ operator_namespace }}'
      label_selectors:
        - type = {{ ansible_operator_meta.name }}-bench-server-{{ trunc_uuid }}
    register: server_pods

  - name: Server Job and Pod names - to clean
    set_fact:
      clean_jobs: |
          [
          {% for item in server_jobs.resources %}
            "{{ item['metadata']['name'] }}",
          {% endfor %}
          ]
      clean_pods: |
          [
          {% for item in server_pods.resources %}
            "{{ item['metadata']['name'] }}",
          {% endfor %}
          ]

  - name: Cleanup server Job 
    k8s:
      kind: Job
      api_version: v1
      namespace: '{{ operator_namespace }}'
      state: absent
      name: "{{ item }}"
    with_items: "{{ clean_jobs }}"

  - name: Cleanup server Pod 
    k8s:
      kind: Pod
      api_version: v1
      namespace: '{{ operator_namespace }}'
      state: absent
      name: "{{ item }}"
    with_items: "{{ clean_pods }}"

  when: resource_kind == "pod" and cleanup == True

- block:
  - name: Cleanup redis
    command: "{{ item }}"
    with_items:
      - redis-cli del num_completion-{{trunc_uuid}}
      - redis-cli del start-{{trunc_uuid}}
  when: resource_kind == "pod" 




#
# no <VM> kind block - We leave VM running
#

- operator_sdk.util.k8s_status:
    api_version: ripsaw.cloudbulldozer.io/v1alpha1
    kind: Benchmark
    name: "{{ ansible_operator_meta.name }}"
    namespace: "{{ operator_namespace }}"
    status:
      state: Complete
      complete: true

