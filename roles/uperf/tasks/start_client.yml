---

- name: Get pod info
  k8s_facts:
    kind: Pod
    api_version: v1
    namespace: '{{ operator_namespace }}'
    label_selectors:
      - type = {{ ansible_operator_meta.name }}-bench-server-{{ trunc_uuid }}
  register: server_pods

- name: Generate uperf xml files
  k8s:
    definition: "{{ lookup('template', 'configmap.yml.j2') | from_yaml }}"

- block:
  ### <POD> kind 
  - name: Start Client(s) w/o serviceIP
    k8s:
      definition: "{{ lookup('template', 'workload.yml.j2') | from_yaml }}"
    vars: 
      resource_item: "{{ server_pods.resources }}"
    when: workload_args.serviceip|default(False) == False and server_pods.resources|length > 0

   #
   # Each server annotates a "node_idx". Each peer client will
   # derive its affinity according the 'colocate' variable.
   #

  - name: Start Client(s) with serviceIP
    k8s:
      definition: "{{ lookup('template', 'workload.yml.j2') | from_yaml }}"
    vars: 
      resource_item: "{{ serviceip.resources }}"
    when: workload_args.serviceip|default(False) == True and serviceip.resources|length > 0

  when: resource_kind == "pod"
 
- block:
  ### <VM> kind 

  - name: Wait for vms to be running....
    k8s_facts:
      kind: VirtualMachineInstance
      api_version: kubevirt.io/v1alpha3
      namespace: '{{ operator_namespace }}'
      label_selectors:
        - type = {{ ansible_operator_meta.name }}-bench-server-{{ trunc_uuid }}
    register: server_vms


  - name: Generate uperf test files
    k8s:
      definition: "{{ lookup('template', 'configmap_script.yml.j2') | from_yaml }}"
    with_items: "{{ server_vms.resources }}"

  - name: Start Client(s)
    k8s:
      definition: "{{ lookup('template', 'workload_vm.yml.j2') | from_yaml }}"
    with_items: "{{ server_vms.resources }}"
    when: server_vms.resources|length > 0

  when: resource_kind == "vm"

- operator_sdk.util.k8s_status:
    api_version: ripsaw.cloudbulldozer.io/v1alpha1
    kind: Benchmark
    name: "{{ ansible_operator_meta.name }}"
    namespace: "{{ operator_namespace }}"
    status:
      state: Waiting for Clients


