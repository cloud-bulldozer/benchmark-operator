---
apiVersion: v1
kind: ConfigMap
metadata:
  name: uperf-run-script-{{item.status.interfaces[0].ipAddress}}-{{ trunc_uuid }}
  namespace: '{{ operator_namespace }}'
data:
  run_script.sh : |
    export h={{item.status.interfaces[0].ipAddress}}
{% if elasticsearch is defined %}
{% if elasticsearch.url is defined %}
    export es={{ elasticsearch.url }}
    export es_index={{ elasticsearch.index_name | default("ripsaw-uperf") }}
    export es_verify_cert={{ elasticsearch.verify_cert | default(true) }}
    export parallel={{ elasticsearch.parallel | default(false) }}
    export uuid={{uuid}}
{% endif %}
{% endif %}
{% if test_user is defined %}
    export test_user={{test_user}}
{% endif %}
    export clustername={{clustername}}
    export hostnet={{workload_args.hostnetwork}}
    export ips=$(hostname -I)
    echo "Setting ready, waiting for signal to start..."
    redis-cli -h {{bo.resources[0].status.podIP}} setnx clients-{{trunc_uuid}} 0
    redis-cli -h {{bo.resources[0].status.podIP}} incr clients-{{trunc_uuid}}
    while true; do
      BO_START=$(redis-cli -h {{bo.resources[0].status.podIP}} get start)
      CLIENTS_READY=$(redis-cli -h {{bo.resources[0].status.podIP}} get clients-{{ trunc_uuid }})
      SERVERS_READY=$(redis-cli -h {{bo.resources[0].status.podIP}} get {{ trunc_uuid }})
      if [[ ("${BO_START}" =~ 'true') && ("${CLIENTS_READY}" == "${SERVERS_READY}") ]]; then
{% for test in workload_args.test_types %}
{% for proto in workload_args.protos %}
{% for size in workload_args.sizes %}
{% if size is iterable %}
{% set wsize = size[0] %}
{% set rsize = size[1] %}
{% else %}
{% set wsize = size %}
{% set rsize = size %}
{% endif %}
{% for nthr in workload_args.nthrs %}
        cat /tmp/uperf-test/uperf-{{test}}-{{proto}}-{{wsize}}-{{rsize}}-{{nthr}};
        run_snafu --tool uperf -w /tmp/uperf-test/uperf-{{test}}-{{proto}}-{{wsize}}-{{rsize}}-{{nthr}} -s {{workload_args.samples}} --resourcetype {{resource_kind}} -u {{ uuid }} --user {{test_user | default("ripsaw")}} \
{% if workload_args.debug is defined and workload_args.debug %}
        -v \
{% endif %}
        ;
{% endfor %}
{% endfor %}
{% endfor %}
{% endfor %}
      else
        sleep 0.1;
        continue;
      fi;
      break;
    done;
    redis-cli -h {{bo.resources[0].status.podIP}} set start false
    redis-cli -h {{bo.resources[0].status.podIP}} del clients-{{trunc_uuid}}
    redis-cli -h {{bo.resources[0].status.podIP}} set complete true
