---
- name: Get current state
  k8s_facts:
    api_version: ripsaw.cloudbulldozer.io/v1alpha1
    kind: Benchmark
    name: '{{ ansible_operator_meta.name }}'
    namespace: '{{ operator_namespace }}'
  register: resource_state

- name: Update current state
  operator_sdk.util.k8s_status:
    api_version: ripsaw.cloudbulldozer.io/v1alpha1
    kind: Benchmark
    name: "{{ ansible_operator_meta.name }}"
    namespace: "{{ operator_namespace }}"
    status:
      state: Starting
      complete: false
  when: resource_state.resources[0].status.state is not defined

- name: Get current state
  k8s_facts:
    api_version: ripsaw.cloudbulldozer.io/v1alpha1
    kind: Benchmark
    name: '{{ ansible_operator_meta.name }}'
    namespace: '{{ operator_namespace }}'
  register: resource_state

- block:

  - set_fact:
      smallfile_path: /tmp
    when: workload_args.clients|default('1')|int > 0

  - set_fact:
      smallfile_path: /mnt/pvc
    when: workload_args.clients|default('1')|int > 0 and workload_args.storageclass is defined and workload_args.storagesize is defined

  - name: Create PVC(s)
    k8s:
      definition:
        kind: PersistentVolumeClaim
        apiVersion: v1
        metadata:
          name: "claim{{ item }}-{{ trunc_uuid }}"
          namespace: "{{ operator_namespace }}"
          annotations:
            volume.beta.kubernetes.io/storage-class: "{{ workload_args.storageclass }}"
        spec:
          accessModes:
            - ReadWriteOnce
          resources:
            requests:
              storage: "{{ workload_args.storagesize }}"
    with_sequence: start=1 count={{ workload_args.clients|default('1')|int }}
    when: workload_args.clients|default('1')|int > 0 and workload_args.storageclass is defined and workload_args.storagesize is defined

  - name: Generate smallfile test input yaml
    k8s:
      definition:
        apiVersion: v1
        kind: ConfigMap
        metadata:
          namespace: "{{ operator_namespace }}"
          name: smallfile-test-{{ trunc_uuid }}
        data:
          smallfilejob: "{{ lookup('template', 'smallfilejob.other_parameters.yaml.j2') }}"
          subscriber: "{{ lookup('template', 'subscriber.py.j2') }}"
          publisher: "{{ lookup('template', 'publisher.py.j2') }}"

  - name: Capture operator information
    k8s_facts:
      kind: Pod
      api_version: v1
      namespace: "{{ operator_namespace }}"
      label_selectors:
        - name = benchmark-operator
    register: bo

  - name: Run PUBLISHER Pod
    k8s:
      definition:
        kind: Job
        apiVersion: batch/v1
        metadata:
          name: "smallfile-publisher-{{ trunc_uuid }}"
          namespace: "{{ operator_namespace }}"
        spec:
          ttlSecondsAfterFinished: 600
          template:
            metadata:
              labels:
                app: smallfile-publisher
            spec:
              containers:
                - name: publisher-container
                  image: "{{ workload_args.image | default('quay.io/cloud-bulldozer/smallfile:master') }}"
                  tty: true
                  command: ["/bin/sh", "-c"]
                  workingDir: /root/smallfile-master/
                  args:
                    - python /tmp/publisher {{bo.resources[0].status.podIP}} {{workload_args.clients|default('1')|int}}
                  volumeMounts:
                    - name: config-volume
                      mountPath: "/tmp"
              volumes:
                - name: config-volume
                  configMap:
                    name: smallfile-test-{{ trunc_uuid }}
                    defaultmode: 0777
              restartPolicy: Never
    when: workload_args.clients|default('1')|int > 0

  - name: Create smallfile pods
    k8s:
      definition: "{{ lookup('template', 'workload_job.yml.j2') }}"
    with_sequence: start=1 count={{ workload_args.clients|default('1')|int }}
    when: workload_args.clients|default('1')|int > 0

  - operator_sdk.util.k8s_status:
      api_version: ripsaw.cloudbulldozer.io/v1alpha1
      kind: Benchmark
      name: "{{ ansible_operator_meta.name }}"
      namespace: "{{ operator_namespace }}"
      status:
        state: Running
        complete: false

  when: resource_state.resources[0].status.state == "Starting"

- block:

  - name: Waiting for pods to complete....
    k8s_facts:
      kind: pod
      api_version: v1
      namespace: '{{ operator_namespace }}'
      label_selectors:
        - app = smallfile-benchmark-{{ trunc_uuid }}
    register: client_pods

  - operator_sdk.util.k8s_status:
      api_version: ripsaw.cloudbulldozer.io/v1alpha1
      kind: Benchmark
      name: "{{ ansible_operator_meta.name }}"
      namespace: "{{ operator_namespace }}"
      status:
        state: Complete
        complete: true
    when: "workload_args.clients|default('1')|int == (client_pods|json_query('resources[].status[]')|selectattr('phase','match','Succeeded')|list|length)"

  when: resource_state.resources[0].status.state == "Running"
