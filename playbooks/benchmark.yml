- hosts: localhost
  collections:
   - operator_sdk.util
  gather_facts: no
  tasks:

  - include_role:
      name: "ceph_osd_cache_drop"
    when: workload.args.drop_cache_rook_ceph is defined

  - include_role:
      name: "kernel_cache_drop"
    when: workload.args.drop_cache_kernel is defined

  - name: Get update from Cerberus if connected
    block:
    - include_role:
        name: "cerberus"

    when: cerberus_url is defined and cerberus_url != ""


  - name: Get state
    k8s_facts:
      api_version: ripsaw.cloudbulldozer.io/v1alpha1
      kind: Benchmark
      name: '{{ ansible_operator_meta.name }}'
      namespace: '{{ operator_namespace }}'
    register: cr_state

  - name: Capture operator information
    k8s_facts:
      kind: Pod
      api_version: v1
      namespace: "{{ operator_namespace }}"
      label_selectors:
        - name = benchmark-operator
    register: bo

  - debug:
      msg: "{{ cr_state }}"

  - name: Set Workload UUID
    block:
    - include_role:
        name: "uuid"

    - name: Setting the uuid for the benchmark
      operator_sdk.util.k8s_status:
        api_version: ripsaw.cloudbulldozer.io/v1alpha1
        kind: Benchmark
        name: "{{ ansible_operator_meta.name }}"
        namespace: "{{ operator_namespace }}"
        status:
          uuid: "{{ uuid }}"
          complete: false
          suuid: "{{ trunc_uuid }}"
          metadata: "not collected"
          cerberus: "not connected"
    
    when: workload is defined and (cr_state.resources[0].status is not defined or cr_state.resources[0].status.uuid is not defined)


  - set_fact:
      uuid: "{{ cr_state.resources[0].status.uuid }}"
      trunc_uuid: "{{ cr_state.resources[0].status.suuid }}"

  - name: Run Workload
    block:
    
    - block:
      
      - include_role:
          name: backpack
        when: metadata is defined and not metadata.targeted | default('true') | bool

      - operator_sdk.util.k8s_status:
          api_version: ripsaw.cloudbulldozer.io/v1alpha1
          kind: Benchmark
          name: "{{ ansible_operator_meta.name }}"
          namespace: "{{ operator_namespace }}"
          status:
            metadata: "Collecting"
        when: metadata is defined and metadata.targeted | default('true') | bool and not cr_state.resources[0].status.state is defined
    
      when: metadata is defined and metadata.collection | default('false') | bool and (cr_state.resources[0].status.metadata is defined and cr_state.resources[0].status.metadata != "Complete")

    - block:

      - include_role:
          name: "common"

      - include_role: 
          name: "{{ workload.name }}"
        vars:
          workload_args: "{{ workload.args }}"

      when: metadata is not defined or not metadata.collection | default('false') | bool or (cr_state.resources[0].status.metadata is defined and cr_state.resources[0].status.metadata == "Complete") or metadata.targeted | default('true') | bool
    
    when: cr_state is defined and cr_state.resources[0].status is defined and not cr_state.resources[0].status.complete|bool and (cr_state.resources[0].status.state is not defined or cr_state.resources[0].status.state != "Error")

  - include_role:
      name: system-metrics
    vars:
      workload_args: "{{ workload.args }}"
    when:
    - cr_state.resources[0].status.state is defined
    - cr_state.resources[0].status.state == "Complete"
    - system_metrics.collection | bool
    - workload.name not in ["kube-burner", "backpack"]
